Index: SYEI_stamping_press_system/parameter.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import math\r\n\r\n# 電子型錄規格\r\nA = [720, 830, 890, 940, 1050, 1160, 1300, 1480, 1560, 1760]\r\nA_15 = [1080, 1245, 1335, 1410, 1575, 1740, 1950, 2220, 2340, 2640]\r\nB = [1058, 1125, 1210, 1315, 1480, 1680, 1985, 2113, 2400, 2700]\r\nB_15 = [1587, 1688, 1815, 1973, 2220, 2520, 2978, 3170, 3600, 4050]\r\nH = [2060, 2185, 2290, 2540, 2755, 2990, 3270, 3725, 4005, 4285]\r\nR = [388, 486, 516, 544, 614, 670, 730, 900, 970, 1040]\r\nR_15 = [582, 729, 774, 816, 921, 1005, 1095, 1350, 1455, 1560]\r\nE = [700, 780, 840, 900, 1050, 1150, 1250, 1400, 1500, 1600]\r\nE_15 = [1051, 1170, 1260, 1350, 1575, 1725, 1875, 2100, 2250, 2400]\r\nD_DH = [250, 280, 330, 350, 380, 430, 490, 550, 580, 610]\r\nD_S = [80, 90, 110, 130, 150, 180, 200, 220, 250, 280]\r\nD_H = [50, 60, 70, 80, 100, 110, 130, 150, 180, 210]\r\nD_P = [35, 40, 45, 50, 60, 70, 80, 90, 100, 110]\r\nDH_S = [230, 250, 270, 300, 330, 350, 400, 450, 450, 500]\r\nDH_H = [200, 220, 240, 270, 300, 320, 360, 400, 400, 450]\r\nDH_P = [200, 220, 240, 270, 300, 320, 360, 400, 400, 450]\r\nS = [983, 1068, 1158, 1285, 1445, 1630, 1809, 2067, 2262, 2357]\r\nH_Z = [1260, 1385, 1490, 1640, 1855, 2086.933, 2370, 2725, 3005, 3285]\r\nO = [1045, 1075, 1125, 1145, 1175, 1225, 1285, 1345, 1375, 1405]\r\nhole_type = [0, 1, 2]\r\nP = [330, 380, 430, 480, 560, 650, 720, 860, 960, 1060]\r\nP_15 = [495, 570, 645, 721, 840, 975, 1080, 1290, 1440, 1590]\r\nQ = [250, 300, 350, 400, 460, 520, 580, 650, 720, 790]\r\nQ_15 = [375, 450, 525, 600, 690, 780, 870, 975, 1080, 1185]\r\nT = [85, 100, 115, 130, 140, 155, 165, 180, 180, 200]\r\nZ = [800, 800, 800, 900, 900, 900, 900, 1000, 1000, 1100]\r\nF = [320, 400, 440, 520, 600, 680, 760, 840, 900, 960]\r\nFRAME20_H = [288, 363, 428, 445.5, 558, 688, 833, 998, 1128, 1178]\r\nFRAME2_lower_depth = [166.016, 246.016, 286.016, 366.016, 446.016, 526.016, 606.016, 686.016, 746.016, 806.016]\r\nFRAME2_lower_depth_15 = [331.016, 451.016, 511.016, 631.016, 751.016, 871.016, 991.016, 1111.016, 1201.016, 1291.016]\r\nFRAME1_lower_high = [1330, 1335, 1340, 1445, 1455, 1460, 1470, 1575, 1595, 1695]\r\nFRAME20_FRAME2_YZ = [805, 805, 979, 979, 979, 979, 979, 979, 979, 979]\r\nBALANCER1_XZ = [204, 253, 268, 282, 317, 345, 375, 460, 575, 690]  # (R+180mm)/2+80mm\r\nFRAME_10_H = [558, 620.5, 673, 798, 905.5, 1023, 1163, 1320.5, 1530.5, 1740.5]\r\nFRAME_32_XY = [0, 0, 0, 1722, 1819.5, 1922, 2052, 2294.5, 2504.5, 2794.5]\r\nFRAME44_height = [588, 665.5, 733, 773, 890.5, 1023, 1173, 1385.5, 1455.5, 1445.5]\r\nFRAME_41_depth = [590, 590, 590, 590, 490, 590, 590, 590, 590, 590]\r\nFRAME_7_width = [176, 182, 197, 208, 228, 255, 295, 299, 305, 305]\r\nFRAME_7_15_width = [200.3, 209.3, 231.8, 248.3, 278.3, 318.8, 378.8, 384.8, 393.8, 393.8]\r\nFRAME_11_height = [1122, 1184.5, 1237, 1362, 1469.5, 1587, 1727, 1884.5, 2094.5, 2304.5]\r\nFRAME_11_width = [600, 680, 720, 800, 880, 960, 1040, 1120, 1180, 1240]\r\nFRAME_11_15_width = [765, 885, 945, 1065, 1185, 1305, 1425, 1545, 1635, 1725]\r\nFRAME_8_width = [164, 170, 185, 196, 216, 243, 283, 288, 293, 358]\r\nFRAME_8_15_width = [246, 255, 278, 294, 324, 365, 425, 432, 440, 537]\r\nFRAME_13_depth = [59.016, 139.016, 179.016, 259.016, 339.016, 419.016, 499.016, 579.016, 639.016, 699.016]\r\nFRAME_6_7_width = [48.5, 54.5, 69.5, 80.5, 100.5, 127.5, 167.5, 171.5, 177.5, 183.5]\r\npocket_1_upper_hole = [370, 415, 450, 577.5, 670, 770, 895, 1080, 1210, 1340]\r\nFRAME_10_11_center_to_Y_1 = ['', '', '', '', -560.5, -552, -600, -715.5, -719.5, -614]\r\nFRAME_10_11_center_to_Y_2 = ['', '', '', '', -587.5, -583, -650 + 19, -765.5 + 19, -739.5, -644.5]\r\n\r\n# 三角函數\r\nsin45 = math.sin(math.radians(45))\r\ncos45 = math.cos(math.radians(45))\r\nsin30 = math.sin(math.radians(30))\r\ncos30 = math.cos(math.radians(30))\r\nsin60 = math.sin(math.radians(60))\r\ncos60 = math.cos(math.radians(60))\r\ncos35_267 = math.cos(math.radians(35.267))\r\nsin35_267 = math.sin(math.radians(35.267))\r\n\r\n# -------------開啟零件檔-------------\r\nfile_name_list = ['BOLSTER1', 'BOLSTER2', 'BOLSTER3', 'Fixture', 'FRAME1', 'FRAME2', 'FRAME3', 'FRAME4',\r\n                  'FRAME5', 'FRAME6', 'FRAME7', 'FRAME8', 'FRAME9', 'FRAME10', 'FRAME11', 'FRAME12', 'FRAME13',\r\n                  'FRAME14', 'FRAME15', 'FRAME16', 'FRAME17', 'FRAME18', 'FRAME19', 'FRAME20', 'FRAME21',\r\n                  'FRAME22', 'FRAME23', 'FRAME24', 'FRAME25', 'FRAME26', 'FRAME27', 'FRAME28', 'FRAME29',\r\n                  'FRAME30', 'FRAME31', 'FRAME32', 'FRAME33', 'FRAME34', 'FRAME35', 'FRAME36', 'FRAME36',\r\n                  'FRAME37', 'FRAME38', 'FRAME39', 'FRAME40', 'FRAME41', 'FRAME42', 'FRAME43', 'FRAME44',\r\n                  'FRAME45', 'FRAME46', 'GIB1', 'GIB2', 'BALANCER_LEFT_All', 'BALANCER_RIGHT_ALL',\r\n                  'CRANK_SHAFT_CLOCK',\r\n                  'CLUCTH_ASSEMBLY_All', 'SLIDE_UNIT_All', 'CRANK_SHAFT', 'JOINT_All', 'MAIN_GEAR1',\r\n                  'MAIN_GEAR2', 'MAIN_GEAR3', 'MAIN_GEAR4', 'JOINT1', 'FRAME47', 'FRAME48', 'FRAME49',\r\n                  'FRAME50', 'FRAME51', 'FRAME52', 'MOTOR',\r\n                  ]\r\n\r\n# -------------焊接圖---------------\r\n# 隱藏part\r\nhide_part_name = ['BOLSTER1', 'BOLSTER2', 'BOLSTER3', 'BALANCER_LEFT_All', 'BALANCER_RIGHT_All', 'CRANK_SHAFT_CLOCK',\r\n                  'CLUCTH_ASSEMBLY_All', 'SLIDE_UNIT_All', 'CRANK_SHAFT.1', 'JOINT_All', 'MAIN_GEAR1',\r\n                  'MAIN_GEAR3', 'MAIN_GEAR4', 'JOINT1', 'GIB1', 'GIB2', 'FRAME35', 'FRAME40', 'Fixture']\r\npart_name_Section_view_F_F = ['FRAME1', 'FRAME10']\r\npart_name_Section_view_D_D = ['FRAME21', 'FRAME22', 'FRAME32']\r\n# 前視圖中心 & 上視圖中心\r\ndrafting_front_area_centerX = 435\r\n# 下圖\r\ndrafting_down_area_centerY = 460 / 2 + 65\r\n# 上圖\r\ndrafting_up_area_centerY = (821 - 65 - 460) / 2 + 65 + 420\r\n# 圖面最大範圍框\r\ndrafting_view_min_Y = 43\r\ndrafting_view_max_Y = 842\r\ndrafting_view_min_X = 20\r\ndrafting_view_max_X = 1169\r\n# 圖框虛線間隔\r\ndraft_X_clearence = 10\r\ndraft_Y_clearence = 25\r\n# 下圖Y最小位置\r\ndrafting_down_min_Y = 65\r\n# 焊接符號標註文字\r\n# 註:第一格無值\r\ndrafting_Welding_text = {'A-A Top': ['', '15', '', '6處\\n頂面焊道要用砂輪磨平', '', '', '', '', '', '', '35°'],\r\n                         'test': ['', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']}\r\n# 圈碼座標\r\n\r\n\r\n# -------------平板相關參數---------------\r\n# T型槽相關參數\r\ntotal_t_slot_h_type = []  # 型式(分段、貫穿)\r\ntotal_position_y = []  # T形槽位置\r\ntotal_LL = []  # 分段LL尺寸\r\ntotal_LR = []  # 分段LR尺寸\r\ntotal_SL = []  # 讓槽SL尺寸\r\ntotal_SR = []  # 讓槽SR尺寸\r\ntotal_t_slot_v_type = []  # 型式(分段、貫穿)\r\ntotal_position_x = []  # T形槽位置\r\ntotal_LF = []  # 分段LF尺寸\r\ntotal_LB = []  # 分段LB尺寸\r\ntotal_SF = []  # 讓槽SF尺寸\r\ntotal_SB = []  # 讓槽SB尺寸\r\n\r\n# 機架外板喉部位置\r\nt1 = [19, 22, 25, 28, 45, 50, 55, 60, 65]\r\nt2 = [50, 50, 55, 60, 65, 90, 105, 105, 105]\r\nB2 = [388, 486, 516, 544, 614, 670, 730, 900, 970]\r\nB1 = [526, 630, 676, 720, 834, 950, 1050, 1230, 1310]\r\n\r\n# 平板長寬尺吋\r\nplate_length = [700, 780, 840, 900, 1050, 1150, 1250, 1400, 1500]\r\nplate_width = [320, 400, 440, 520, 600, 680, 760, 840, 900]\r\nplate_lv1 = [80, 60, 60, 150, 100, 100, 150, 100, 150]\r\nplate_lv2 = [140, 120, 210, 100, 100, 150, 100, 150, 150]\r\n# 標準類型平板名稱紀錄\r\nplate_normal_name = []\r\n\r\n# 基本平板類型\r\nplate_type = ['標準圓孔', '標準無孔', '標準方孔', '標準模墊型', '標準加大I型(無孔)', '標準加大I型(圓孔)', '標準加大I型(方孔)', '標準加大II型(無孔)', '標準加大II型(圓孔)', '標準加大II型(方孔)']\r\nplate_normal_type = ['標準圓孔', '標準無孔', '標準方孔', '標準模墊型']\r\nplate_lv1_type = ['標準加大I型(無孔)', '標準加大I型(圓孔)', '標準加大I型(方孔)']\r\nplate_lv2_type = ['標準加大II型(無孔)', '標準加大II型(圓孔)', '標準加大II型(方孔)']\r\nplate_base_type = ['標準', '加大I型', '加大II型']\r\nplate_special_type = []  # 紀錄當前特殊平板種類名稱\r\n\r\n# T型槽外型尺寸\r\nt_all_dimension = []\r\nt_all_dimension_name = ['T_type_A', 'T_type_B', 'T_type_C', 'T_type_D']\r\n# T型槽主頁表格\r\nt_table_dimension_parameter = ['A', 'B', 'C', 'D']\r\n\r\n# 除料孔(待補齊)\r\nplate_hole_type = []\r\n# 平板變數大全\r\nplate_all_parameter = {}\r\n# 下料孔參數\r\ncutout_hole_machining_X = 0\r\ncutout_hole_machining_Y = 0\r\nlv = []\r\n# 下料孔位置尺寸\r\nfeeding_hole_position = []\r\n# 下料孔界線\r\ncutout_all_limit = {}\r\n# 下料孔外型尺寸\r\ncutout_part_dimension = ['', '', '', '', '']\r\ncutout_spuare_R = []\r\n\r\n# 下料孔各形狀變數名稱\r\ncutout_parameter_circle = ['HD']\r\ncutout_parameter_square = ['HLR', 'HFB']\r\ncutout_parameter_funnel = ['HULR', 'HDLR', 'HUFB', 'HDFB', 'HH']\r\n\r\n# 特殊平板(模墊頂桿孔)\r\ncutout_molded_cushion_A = [26, 32]\r\ncutout_molded_cushion_B = [33.4, 40]\r\ncutout_molded_cushion_L = [8.5, 10.5]\r\ncutout_molded_cushion_i = [5, 5, 5, 5, 6, 6, 6, 7, 8]\r\ncutout_molded_cushion_j = [3, 3, 3, 3, 4, 4, 4, 5, 6]\r\n# 標準平板(模墊型頂桿孔)\r\nnormal_cutout_molded_cushion_A = ['M20', 'M20', 'M24', 'M24', 'M30']\r\nnormal_cutout_molded_cushion_B = [40, 40, 45, 45, 50]\r\nnormal_cutout_molded_cushion_D = [63, 63, 65, 65, 73]\r\nnormal_cutout_molded_cushion_length = [70, 70, 80, 80, 110]\r\nnormal_cutout_molded_cushion_width = [177.5, 177.5, 220, 220, 245]\r\nnormal_cutout_molded_cushion_width_gap = [65, 65, 75, 75, 75, 90, 100, 100, 100]\r\nnormal_cutout_molded_cushion_length_gap = [60, 90, 100, 100, 75, 90, 100, 100, 100]\r\nnormal_cutout_molded_cushion_length_quantity = [5, 5, 5, 5, 6, 6, 6, 7, 8]\r\nnormal_cutout_molded_cushion_width_quantity = [3, 3, 3, 3, 4, 4, 4, 5, 6]\r\n# 主頁面資料\r\nseries1 = ['C型單軸自動化選單', '基本參數']\r\nseries2 = ['單位', '銷售地區法規', '機種', '形式', '平板', '衝頭']\r\nseries3 = ['', '行程(STR.)', '行程數', '閉合(D.H.)']\r\nseries4 = ['廠牌', '馬力', '廠牌', '馬力']\r\nseries5 = ['作業面高度(Z)', '電源']\r\nseries6 = ['選配項目', '備品項目']\r\nseries7 = ['單位', 'mm', 'SPM', 'mm', '_', 'kW×P', '_', 'kW×P', 'kg']\r\nseries8 = ['_', '_', 'mm', '_']\r\ncombo_box_series1 = ['公制', '英制']\r\n\r\n#沖床共通變數\r\nstamping_press_type = 0\r\nstamping_press_style = 's'\r\nstamping_press_stroke = {'S': ['80', '90', '110', '130', '150', '180', '200', '220', '250'],\r\n                         'H': ['50', '60', '70', '80', '100', '110', '130', '150', '180'],\r\n                         'P': ['35', '40', '45', '50', '60', '70', '80', '90', '100']}\r\nstamping_press_cycle = {'S': ['70~110', '60~95', '50~85', '40~75', '40~75', '35~65', '30~50', '25~45', '22~40'],\r\n                        'H': ['80~140', '70~130', '60~120', '55~110', '50~100', '45~90', '35~70', '30~60', '30~50'],\r\n                        'P': ['80~180', '80~170', '80~160', '70~150', '65~140', '60~125', '50~100', '40~85', '30~70']}\r\nstamping_press_DH = {'S': ['230', '250', '270', '300', '330', '350', '400', '450', '450'],\r\n                     'H': ['200', '220', '240', '270', '300', '320', '360', '400', '400'],\r\n                     'P': ['200', '220', '240', '270', '300', '320', '360', '400', '400']}\r\ncustomize_stroke = 0\r\ncustomize_cycle = 0\r\ncustomize_DH = 0\r\n\r\n#公英制單位轉換\r\nunit_metric = ['mm', 'SPM', 'mm', '_', 'kW×P', '_', 'kW×P', 'kg', '', '_', '_', 'mm', '_']\r\nunit_english = ['inch', 'SPM', 'inch', '_', 'kW×P', '_', 'kW×P', 'kg', '', '_', '_', 'inch', '_']
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SYEI_stamping_press_system/parameter.py b/SYEI_stamping_press_system/parameter.py
--- a/SYEI_stamping_press_system/parameter.py	(revision ad4b10c49ffb455c1b8936742317bee1e8e94acb)
+++ b/SYEI_stamping_press_system/parameter.py	(date 1699363997474)
@@ -214,4 +214,14 @@
 
 #公英制單位轉換
 unit_metric = ['mm', 'SPM', 'mm', '_', 'kW×P', '_', 'kW×P', 'kg', '', '_', '_', 'mm', '_']
-unit_english = ['inch', 'SPM', 'inch', '_', 'kW×P', '_', 'kW×P', 'kg', '', '_', '_', 'inch', '_']
\ No newline at end of file
+unit_english = ['inch', 'SPM', 'inch', '_', 'kW×P', '_', 'kW×P', 'kg', '', '_', '_', 'inch', '_']
+
+#保留輸入數值(主頁面ver.)
+main_change = ''
+unit_keep = ''
+type_keep = ''
+style_keep = ''
+stroke_keep = ''
+cycle_keep = ''
+DH_keep = ''
+keep_items = [main_change, unit_keep, type_keep, style_keep, stroke_keep, cycle_keep, DH_keep]
Index: SYEI_stamping_press_system/DEMO.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from PyQt5 import QtCore, QtGui, QtWidgets\r\nfrom PyQt5.QtWidgets import QVBoxLayout, QWidget, QPushButton, QLabel, QTableWidgetItem, QHeaderView, QComboBox, QAbstractItemView, QMessageBox, QHBoxLayout\r\nfrom PyQt5.QtCore import Qt\r\nfrom PyQt5.QtGui import QColor, QBrush, QPixmap\r\nfrom DEMOGUI import Ui_Dialog\r\nfrom PAD_main import Ui_Form as pad_main_Form\r\nfrom PAD_MACHINING import Ui_Form as pad_machining_Form\r\nfrom PAD_dimension import Ui_Form as pad_dimension_Form\r\nfrom pad_feeding_hole import Ui_Form as pad_feeding_hole_Form\r\nfrom cutout_hole_GUI import Ui_Form as cutout_hole_machining_form\r\nfrom plate_main_first import Ui_Form as plate_main_first_form\r\nfrom pad_main_simple import Ui_Form as pad_main_simple_form\r\nfrom window_main import Ui_Form\r\nfrom io import StringIO\r\nimport main_program as mprog\r\nimport file_path as fp\r\nimport parameter as par\r\nimport Assmebly_design as Ad\r\nimport machining_part_TYPE_change as mptc\r\nimport welding_part_TYPE_change as wptc\r\nimport excel_parameter_change as epc\r\nimport parameter_design_part as pdp\r\nimport interference as itf\r\nimport test_T as tT\r\nimport sys\r\nimport datetime\r\nimport os\r\nimport time\r\nimport traceback\r\nimport check as ch\r\nimport STP_input as S_i\r\n\r\ntest_stop = False\r\n\r\nclass main(QtWidgets.QWidget, Ui_Form):\r\n    def __init__(self):\r\n        super(main, self).__init__()\r\n        self.ui = Ui_Form()\r\n        self.ui.setupUi(self)\r\n        self.setting()\r\n        self.ui.start.clicked.connect(self.start)\r\n\r\n    def setting(self):\r\n        # 设置额外的宽度和高度来容纳其他界面元素\r\n        extra_width = 800\r\n        extra_height = 150\r\n        # 获取表格的大小\r\n        table_size = self.ui.window_main_table.size()\r\n        # 设置窗口的大小为表格大小加上额外的宽度和高度\r\n        self.setFixedSize(table_size.width() + extra_width, table_size.height() + extra_height)\r\n        window_size = self.size()\r\n        # 调整表格的大小以填充整个窗口\r\n        self.ui.window_main_table.setGeometry(0, 0, window_size.width(), window_size.height())\r\n        for x in range(0, 2):\r\n            self.ui.window_main_table.setSpan(x, 0, 1, 5) #以某格為基準向下向左合併儲存格\r\n            newItem = QTableWidgetItem(par.series1[x]) #儲存格內文字\r\n            newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter) #設定置中\r\n            newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable) #不可編輯化\r\n            self.ui.window_main_table.setItem(x, 0, newItem) #指定文字放置位置\r\n        for x in range(2, 8):\r\n            self.ui.window_main_table.setSpan(x, 0, 1, 3)\r\n            newItem = QTableWidgetItem(par.series2[x-2])\r\n            newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n            newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable)\r\n            self.ui.window_main_table.setItem(x, 0, newItem)\r\n        for x in range(2, 6):\r\n            self.ui.window_main_table.setSpan(x, 3, 1, 2)\r\n        combo_box_unit = QComboBox()\r\n        combo_box_unit.setEditable(False)\r\n        combo_box_unit.addItem('公制')\r\n        combo_box_unit.addItem('英制')\r\n        self.ui.window_main_table.setCellWidget(2, 3, combo_box_unit)\r\n        combo_box_law = QComboBox()\r\n        combo_box_law.setEditable(False)\r\n        combo_box_law.addItem('一般內銷')\r\n        combo_box_law.addItem('一般外銷')\r\n        combo_box_law.addItem('美國(ASME)')\r\n        combo_box_law.addItem('加拿大')\r\n        combo_box_law.addItem('巴西')\r\n        combo_box_law.addItem('歐洲(CE)')\r\n        self.ui.window_main_table.setCellWidget(3, 3, combo_box_law)\r\n        combo_box_machine = QComboBox()\r\n        combo_box_machine.setEditable(False)\r\n        combo_box_machine.addItem('SN1-25')\r\n        combo_box_machine.addItem('SN1-35')\r\n        combo_box_machine.addItem('SN1-45')\r\n        combo_box_machine.addItem('SN1-60')\r\n        combo_box_machine.addItem('SN1-80')\r\n        combo_box_machine.addItem('SN1-110')\r\n        combo_box_machine.addItem('SN1-160')\r\n        combo_box_machine.addItem('SN1-200')\r\n        combo_box_machine.addItem('SN1-250')\r\n        self.ui.window_main_table.setCellWidget(4, 3, combo_box_machine)\r\n        combo_box_type = QComboBox()\r\n        combo_box_type.setEditable(False)\r\n        combo_box_type.addItem('S')\r\n        combo_box_type.addItem('H')\r\n        combo_box_type.addItem('P')\r\n        self.ui.window_main_table.setCellWidget(5, 3, combo_box_type)\r\n        plate_setup = QPushButton('設定') #括號內為按鈕名稱\r\n        self.ui.window_main_table.setCellWidget(6, 3, plate_setup)\r\n        punch_setup = QPushButton('設定')\r\n        self.ui.window_main_table.setCellWidget(7, 3, punch_setup)\r\n        pad_finish = QtWidgets.QLabel('未設定')\r\n        pad_finish.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        self.ui.window_main_table.setCellWidget(6, 4, pad_finish)\r\n        punch_finish = QtWidgets.QLabel('未設定')\r\n        punch_finish.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        self.ui.window_main_table.setCellWidget(7, 4, punch_finish)\r\n        for x in range(8, 12):\r\n            self.ui.window_main_table.setSpan(x, 0, 1, 2)\r\n            newItem = QTableWidgetItem(par.series3[x - 8])\r\n            newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n            newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable)\r\n            self.ui.window_main_table.setItem(x, 0, newItem)\r\n        self.ui.window_main_table.setSpan(12, 0, 2, 1)\r\n        newItem = QTableWidgetItem('主馬達')\r\n        newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(12, 0, newItem)\r\n        self.ui.window_main_table.setSpan(14, 0, 2, 1)\r\n        newItem = QTableWidgetItem('變頻器')\r\n        newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(14, 0, newItem)\r\n        for x in range(12, 16):\r\n            newItem = QTableWidgetItem(par.series4[x - 12])\r\n            newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n            newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable)\r\n            self.ui.window_main_table.setItem(x, 1, newItem)\r\n        self.ui.window_main_table.setSpan(16, 0, 2, 2)\r\n        newItem = QTableWidgetItem('上模吊重')\r\n        newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(16, 0, newItem)\r\n        self.ui.window_main_table.setSpan(18, 0, 2, 1)\r\n        newItem = QTableWidgetItem('防震腳')\r\n        newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(18, 0, newItem)\r\n        newItem = QTableWidgetItem('廠牌')\r\n        newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(18, 1, newItem)\r\n        newItem = QTableWidgetItem('規格')\r\n        newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(19, 1, newItem)\r\n        for x in range(20, 22):\r\n            self.ui.window_main_table.setSpan(x, 0, 1, 2)\r\n            newItem = QTableWidgetItem(par.series5[x - 20])\r\n            newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n            newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable)\r\n            self.ui.window_main_table.setItem(x, 0, newItem)\r\n        for x in range(22, 24):\r\n            self.ui.window_main_table.setSpan(x, 0, 1, 3)\r\n            newItem = QTableWidgetItem(par.series6[x - 22])\r\n            newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n            newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable)\r\n            self.ui.window_main_table.setItem(x, 0, newItem)\r\n        self.ui.window_main_table.setSpan(16, 2, 2, 1)\r\n        for x in range(8, 17):\r\n            newItem = QTableWidgetItem(par.series7[x - 8])\r\n            newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n            newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable)\r\n            self.ui.window_main_table.setItem(x, 2, newItem)\r\n        for x in range(18, 22):\r\n            newItem = QTableWidgetItem(par.series8[x - 18])\r\n            newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n            newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable)\r\n            self.ui.window_main_table.setItem(x, 2, newItem)\r\n        newItem = QTableWidgetItem('標準')\r\n        newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(8, 3, newItem)\r\n        newItem = QTableWidgetItem('客戶自訂')\r\n        newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(8, 4, newItem)\r\n        punch_stroke = QTableWidgetItem('80')\r\n        punch_stroke.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        punch_stroke.setFlags(punch_stroke.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(9, 3, punch_stroke)\r\n        punch_cycle = QTableWidgetItem('70~110')\r\n        punch_cycle.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        punch_cycle.setFlags(punch_cycle.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(10, 3, punch_cycle)\r\n        punch_DH = QTableWidgetItem('230')\r\n        punch_DH.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        punch_DH.setFlags(punch_DH.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(11, 3, punch_DH)\r\n        motor_company = QTableWidgetItem('東元')\r\n        motor_company.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        motor_company.setFlags(motor_company.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(12, 3, motor_company)\r\n        motor_power = QTableWidgetItem('3.7×4')\r\n        motor_power.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        motor_power.setFlags(motor_power.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(13, 3, motor_power)\r\n        frequency_company = QTableWidgetItem('東元')\r\n        frequency_company.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        frequency_company.setFlags(frequency_company.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(14, 3, frequency_company)\r\n        frequency_power = QTableWidgetItem('3.7×4')\r\n        frequency_power.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        frequency_power.setFlags(frequency_power.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(15, 3, frequency_power)\r\n        upper_kg = QTableWidgetItem('54')\r\n        upper_kg.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        upper_kg.setFlags(upper_kg.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(16, 3, upper_kg)\r\n        for x in range(17, 22):\r\n            self.ui.window_main_table.setSpan(x, 3, 1, 2)\r\n        upper_extra = QTableWidgetItem('PC加大型平衡汽缸')\r\n        upper_extra.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        upper_extra.setFlags(upper_extra.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(17, 3, upper_extra)\r\n        shockproof_company = QComboBox()\r\n        shockproof_company.setEditable(False)\r\n        shockproof_company.addItem('無')\r\n        shockproof_company.addItem('穎益')\r\n        shockproof_company.addItem('UNISORB')\r\n        shockproof_company.addItem('商定')\r\n        self.ui.window_main_table.setCellWidget(18, 3, shockproof_company)\r\n        shockproof_size = QTableWidgetItem('_')\r\n        shockproof_size.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        shockproof_size.setFlags(shockproof_size.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(19, 3, shockproof_size)\r\n        work_height = QTableWidgetItem('800')\r\n        work_height.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        work_height.setFlags(work_height.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(20, 3, work_height)\r\n        power = QComboBox()\r\n        power.setEditable(False)\r\n        power.addItem('200V×50Hz')\r\n        power.addItem('200V×60Hz')\r\n        power.addItem('220V×50Hz')\r\n        power.addItem('220V×60Hz')\r\n        power.addItem('380V×50Hz')\r\n        power.addItem('380V×60Hz')\r\n        power.addItem('415V×50Hz')\r\n        power.addItem('440V×60Hz')\r\n        power.addItem('460V×60Hz')\r\n        power.addItem('480V×60Hz')\r\n        power.addItem('575V×60Hz')\r\n        self.ui.window_main_table.setCellWidget(21, 3, power)\r\n        select_setup = QPushButton('設定')\r\n        self.ui.window_main_table.setCellWidget(22, 3, select_setup)\r\n        spare_parts_setup = QPushButton('設定')\r\n        self.ui.window_main_table.setCellWidget(23, 3, spare_parts_setup)\r\n        select_finish = QtWidgets.QLabel('未設定')\r\n        select_finish.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        self.ui.window_main_table.setCellWidget(22, 4, select_finish)\r\n        spare_parts_finish = QtWidgets.QLabel('未設定')\r\n        spare_parts_finish.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        self.ui.window_main_table.setCellWidget(23, 4, spare_parts_finish)\r\n        punch_stroke_customize = QTableWidgetItem('')\r\n        punch_stroke_customize.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        # punch_stroke_customize.setBackground(QBrush(QColor(255, 191, 0)))  # 背景色\r\n        self.ui.window_main_table.setItem(9, 4, punch_stroke_customize)\r\n        punch_cycle_customize = QTableWidgetItem('')\r\n        punch_cycle_customize.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        # punch_cycle_customize.setBackground(QBrush(QColor(255, 191, 0)))\r\n        self.ui.window_main_table.setItem(10, 4, punch_cycle_customize)\r\n        punch_DH_customize = QTableWidgetItem('')\r\n        punch_DH_customize.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        # punch_DH_customize.setBackground(QBrush(QColor(255, 191, 0)))\r\n        self.ui.window_main_table.setItem(11, 4, punch_DH_customize)\r\n        motor_company_customize = QTableWidgetItem('')\r\n        motor_company_customize.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        # motor_company_customize.setBackground(QBrush(QColor(255, 191, 0)))\r\n        self.ui.window_main_table.setItem(12, 4, motor_company_customize)\r\n        motor_power_customize = QTableWidgetItem('')\r\n        motor_power_customize.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        # motor_power_customize.setBackground(QBrush(QColor(255, 191, 0)))\r\n        self.ui.window_main_table.setItem(13, 4, motor_power_customize)\r\n        frequency_company_customize = QTableWidgetItem('')\r\n        frequency_company_customize.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        # frequency_company_customize.setBackground(QBrush(QColor(255, 191, 0)))\r\n        self.ui.window_main_table.setItem(14, 4, frequency_company_customize)\r\n        frequency_power_customize = QTableWidgetItem('')\r\n        frequency_power_customize.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        # frequency_power_customize.setBackground(QBrush(QColor(255, 191, 0)))\r\n        self.ui.window_main_table.setItem(15, 4, frequency_power_customize)\r\n        upper_kg_customize = QTableWidgetItem('')\r\n        upper_kg_customize.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        # upper_kg_customize.setBackground(QBrush(QColor(255, 191, 0)))\r\n        self.ui.window_main_table.setItem(16, 4, upper_kg_customize)\r\n\r\n        self.ui.window_main_table.setSpan(0, 5, 24, 9)\r\n\r\n        # 在初始化函数中创建 QWidget 和 QLabel\r\n        machine_picture_widget = QWidget()\r\n        machine_picture = QLabel(machine_picture_widget)\r\n\r\n        # 加载图像\r\n        pixmap = QPixmap('machine_picture.png')\r\n        machine_picture.setPixmap(pixmap)\r\n\r\n        scaled_pixmap = pixmap.scaled(pixmap.width()-100,pixmap.height()-110)\r\n        machine_picture.setPixmap(scaled_pixmap)\r\n\r\n        # # 设置 QLabel 居中\r\n        machine_picture.setAlignment(Qt.AlignCenter)\r\n\r\n        # 添加 QLabel 到 QWidget\r\n        machine_picture_layout = QVBoxLayout()\r\n        machine_picture_layout.addWidget(machine_picture)\r\n        machine_picture_widget.setLayout(machine_picture_layout)\r\n\r\n        # 将 QWidget 添加到表格单元格\r\n        self.ui.window_main_table.setCellWidget(0, 5, machine_picture_widget)\r\n        # 将 QLabel 添加到表格单元格\r\n        self.ui.window_main_table.setCellWidget(0, 5, machine_picture)\r\n        # 创建一个 QWidget 作为容器\r\n        button_container = QWidget()\r\n        button_layout = QHBoxLayout()  # 创建一个水平布局对象\r\n        button_container.setLayout(button_layout)  # 将布局附加到button_container上\r\n\r\n        self.ui.window_main_table.cellWidget(2, 3).currentIndexChanged.connect(lambda :self.unit_change())\r\n        self.ui.window_main_table.cellWidget(4, 3).currentIndexChanged.connect(lambda :self.choose_stamping_press_type())\r\n        self.ui.window_main_table.cellWidget(5, 3).currentIndexChanged.connect(lambda :self.choose_stamping_press_type())\r\n        # self.ui.window_main_table.item(9, 4).currentChanged.connect(lambda :self.customize_typing('stroke'))\r\n        plate_setup.clicked.connect(lambda:self.switch_to_plate(par.stamping_press_type))\r\n        # punch_setup.clicked.connect()\r\n        # select_setup.clicked.connect()\r\n        # spare_parts_setup.clicked.connect()\r\n\r\n    def switch_to_plate(self, stamping_press_type):\r\n        self.hide()\r\n        self.nw = plate_first_windows(stamping_press_type)\r\n        self.nw.show()\r\n\r\n    def unit_change(self):\r\n        unit_type = self.ui.window_main_table.cellWidget(2, 3).currentText()\r\n        if unit_type == '公制':\r\n            for x in range(9, 22):\r\n                if x != 17:\r\n                    newItem = QTableWidgetItem(par.unit_metric[x - 9])\r\n                    newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n                    newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable)\r\n                    self.ui.window_main_table.setItem(x, 2, newItem)\r\n                else:\r\n                    pass\r\n        elif unit_type == '英制':\r\n            for x in range(9, 22):\r\n                if x != 17:\r\n                    newItem = QTableWidgetItem(par.unit_english[x - 9])\r\n                    newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n                    newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable)\r\n                    self.ui.window_main_table.setItem(x, 2, newItem)\r\n                else:\r\n                    pass\r\n\r\n    def customize_typing(self, parameter_type):\r\n        if parameter_type == 'stroke':\r\n            item = self.ui.window_main_table.cellWidget(9, 3).text()\r\n            punch_stroke = QTableWidgetItem(item)\r\n            punch_stroke.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n            punch_stroke.setFlags(punch_stroke.flags() & ~Qt.ItemIsEditable)\r\n            self.ui.window_main_table.setItem(9, 3, punch_stroke)\r\n\r\n    def start(self):\r\n        type = self.ui.window_main_table.cellWidget(4, 3).currentText()\r\n        travel_type = str(self.ui.window_main_table.cellWidget(5, 3).currentText())\r\n        specifications_travel_value = str(self.ui.window_main_table.item(9, 3).text())\r\n        specifications_close_working_height_value = str(self.ui.window_main_table.item(11, 3).text())\r\n        # close_working_height = str(self.ui.label_9.text())\r\n        # # delta = str(self.ui.lineEdit_4.text())\r\n        # processing = str(self.ui.comboBox.currentText())\r\n        processing = '是'\r\n        print(type, travel_type, specifications_travel_value, specifications_close_working_height_value)\r\n        self.create_dir(type)\r\n        if specifications_travel_value == \"\":\r\n            self.specifications_travel_value = 0\r\n        else:\r\n            self.specifications_travel_value = int(specifications_travel_value)\r\n        if specifications_close_working_height_value == \"\":\r\n            self.specifications_close_working_height_value = 0\r\n        else:\r\n            self.specifications_close_working_height_value = int(specifications_close_working_height_value)\r\n        self.stamping_press_type = self.choose_stamping_press_type()\r\n        self.p, self.travel_type = self.choos(processing, travel_type)\r\n\r\n        self.alpha, self.beta, self.zeta, self.epsilon = self.frame_calculate(self.stamping_press_type, self.specifications_travel_value,\r\n                                                                              self.specifications_close_working_height_value,\r\n                                                                              self.travel_type)\r\n        if test_stop == False:\r\n            self.create_txt(self.path, type, travel_type, self.specifications_travel_value,\r\n                            self.specifications_close_working_height_value, self.alpha, self.beta, self.zeta,\r\n                            self.epsilon)\r\n            self.change_dir(self.stamping_press_type, self.p, self.alpha, self.beta, self.zeta, self.epsilon, self.machining,\r\n                            self.welding, self.travel_type)\r\n\r\n\r\n    def choose_stamping_press_type(self):\r\n        type = self.ui.window_main_table.cellWidget(4, 3).currentText()\r\n        style = self.ui.window_main_table.cellWidget(5, 3).currentText()\r\n        if type == \"SN1-25\":\r\n            stamping_press_type = 0\r\n        elif type == \"SN1-35\":\r\n            stamping_press_type = 1\r\n        elif type == \"SN1-45\":\r\n            stamping_press_type = 2\r\n        elif type == \"SN1-60\":\r\n            stamping_press_type = 3\r\n        elif type == \"SN1-80\":\r\n            stamping_press_type = 4\r\n        elif type == \"SN1-110\":\r\n            stamping_press_type = 5\r\n        elif type == \"SN1-160\":\r\n            stamping_press_type = 6\r\n        elif type == \"SN1-200\":\r\n            stamping_press_type = 7\r\n        elif type == \"SN1-250\":\r\n            stamping_press_type = 8\r\n        punch_stroke = QTableWidgetItem(par.stamping_press_stroke[style][stamping_press_type])\r\n        punch_stroke.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        punch_stroke.setFlags(punch_stroke.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(9, 3, punch_stroke)\r\n        punch_cycle = QTableWidgetItem(par.stamping_press_cycle[style][stamping_press_type])\r\n        punch_cycle.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        punch_cycle.setFlags(punch_cycle.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(10, 3, punch_cycle)\r\n        punch_DH = QTableWidgetItem(par.stamping_press_DH[style][stamping_press_type])\r\n        punch_DH.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\r\n        punch_DH.setFlags(punch_DH.flags() & ~Qt.ItemIsEditable)\r\n        self.ui.window_main_table.setItem(11, 3, punch_DH)\r\n\r\n        par.stamping_press_type = stamping_press_type\r\n        par.stamping_press_style = style\r\n\r\n\r\n    def choos(self,prossing, travel_type):\r\n        # 確認型號\"輸入型號\"\r\n        # 確認加工方式\r\n        if prossing == '是':\r\n            p = 0\r\n        elif prossing == '否':\r\n            p = 1\r\n        # 確認行程類型\r\n        if travel_type == 'S':\r\n            travel_type = 1\r\n        elif travel_type == 'H':\r\n            travel_type = 2\r\n        elif travel_type == 'P':\r\n            travel_type = 3\r\n        return p, travel_type\r\n\r\n    def frame_calculate(self, stamping_press_type, specifications_travel_value, specifications_close_working_height_value, travel_type):\r\n        Form = QtWidgets.QWidget()\r\n        # Form.setWindowTitle('警告')\r\n        Form.resize(400, 300)\r\n        mbox = QtWidgets.QMessageBox(Form)\r\n\r\n        # 讀取標準資料\r\n        excel = epc.ExcelOp('尺寸整理表', '標準資料')\r\n        type_name, travel_value, close_working_height_value, specifications_travel_min_value, specifications_travel_max_value, specifications_close_working_height_min_value, specifications_close_working_height_max_value = excel.get_standard_parts(\r\n            stamping_press_type * 3)\r\n\r\n        # 噸數&行程類型\r\n        all_type = stamping_press_type * 3 + travel_type - 1\r\n        # 行程\r\n        alpha = int(specifications_travel_value) - travel_value[all_type]\r\n        # 牙球伸長量\r\n        epsilon_1 = (-alpha / 2) + (\r\n                close_working_height_value[all_type] - int(specifications_close_working_height_value))\r\n        elsilon_2 = (alpha / 2)\r\n        epsilon_3 = 0\r\n        epsilon = max(epsilon_1, elsilon_2, epsilon_3)\r\n        # 喉部拉高量\r\n        zeta = (alpha / 2) + epsilon + specifications_close_working_height_value - close_working_height_value[all_type]\r\n        print(zeta)\r\n        # 閉合工作高度驗證公式\r\n        verification_specifications_close_working_height_value = close_working_height_value[all_type] - (\r\n                alpha / 2) - epsilon + zeta\r\n        print(verification_specifications_close_working_height_value)\r\n\r\n        error = False\r\n\r\n        # 驗證行程\r\n        if specifications_travel_value >= specifications_travel_min_value[all_type] and specifications_travel_value <= \\\r\n                specifications_travel_max_value[all_type]:\r\n            print('行程尺寸在允許範圍: %s <= %s <= %s' % (\r\n                specifications_travel_min_value[all_type], specifications_travel_value,\r\n                specifications_travel_max_value[all_type]))\r\n        else:\r\n            print('行程尺寸不再允許範圍: %s <= %s <= %s' % (\r\n                specifications_travel_min_value[all_type], specifications_travel_value,\r\n                specifications_travel_max_value[all_type]))\r\n            mbox.warning(Form, '警告', '行程超出範圍')\r\n            error = True\r\n            self.ui.lineEdit_5.clear()\r\n\r\n        # 驗證閉合工作高度\r\n        if specifications_close_working_height_value >= specifications_close_working_height_min_value[\r\n            all_type] and specifications_close_working_height_value <= \\\r\n                specifications_close_working_height_max_value[all_type]:\r\n            print('閉合工作高度在允許範圍: %s <= %s <= %s' % (\r\n                specifications_close_working_height_min_value[all_type], specifications_close_working_height_value,\r\n                specifications_close_working_height_max_value[all_type]))\r\n        else:\r\n            print('閉合工作高度不在允許範圍: %s <= %s <= %s' % (\r\n                specifications_close_working_height_min_value[all_type], specifications_close_working_height_value,\r\n                specifications_close_working_height_max_value[all_type]))\r\n            mbox.warning(Form, '警告', '閉合工作高度超出範圍')\r\n            error = True\r\n            self.ui.lineEdit_2.clear()\r\n\r\n        # 驗證閉合工作高度是否符合客戶需求\r\n        if verification_specifications_close_working_height_value == specifications_close_working_height_value:\r\n            print('閉合工作高度符合要求: %s = %s' % (\r\n                verification_specifications_close_working_height_value, specifications_close_working_height_value))\r\n        else:\r\n            print(\r\n                'verification_specifications_close_working_height_value: %s；specifications_close_working_height_value: %s' % (\r\n                    verification_specifications_close_working_height_value, specifications_close_working_height_value))\r\n            mbox.warning(Form, '警告', '閉合工作高度不符合客戶需求')\r\n            error = True\r\n            self.ui.lineEdit_2.clear()\r\n            self.ui.lineEdit_5.clear()\r\n\r\n        # 驗證牙球伸長量\r\n        if epsilon >= 0:\r\n            print('牙球伸長量: %s >= 0' % epsilon)\r\n        else:\r\n            print('牙球伸長量: %s <= 0' % epsilon)\r\n            mbox.warning(Form, '警告', '牙球伸長量小於0')\r\n            error = True\r\n            self.ui.lineEdit_2.clear()\r\n            self.ui.lineEdit_5.clear()\r\n\r\n        # 驗證機架拉高量\r\n        if zeta >= 0:\r\n            print('機架拉高量: %s >= 0' % zeta)\r\n        else:\r\n            print('機架拉高量: %s <= 0' % zeta)\r\n            mbox.warning(Form, '警告', '機架拉高量小於0')\r\n            error = True\r\n            self.ui.lineEdit_2.clear()\r\n            self.ui.lineEdit_5.clear()\r\n\r\n        # 驗證喉部拉高量\r\n        if epsilon >= (alpha / 2):\r\n            print('喉部拉高量: %s >= %s' % (epsilon, (alpha / 2)))\r\n        else:\r\n            mbox.warning(Form, '警告', '衝頭縮進導軌內部')\r\n            error = True\r\n            self.ui.lineEdit_2.clear()\r\n            self.ui.lineEdit_5.clear()\r\n\r\n        if error == True:\r\n            global test_stop\r\n            test_stop = True\r\n\r\n        alpha = alpha  # 行程差\r\n        beta = specifications_close_working_height_value - close_working_height_value[all_type]  # 閉合工作高度差\r\n        zeta = zeta  # 喉部拉高量\r\n        epsilon = epsilon  # 牙球伸長量\r\n        return alpha, beta, zeta, epsilon\r\n\r\n    # 建立txt檔\r\n    def create_txt(self, path, travel_type, specifications_travel_value, specifications_close_working_height_value,\r\n                   type, alpha, beta, zeta, epsilon):\r\n        file_txt = path\r\n        txt_name = \"生成參數.txt\"\r\n        with open(file_txt + \"\\\\\" + txt_name, \"w\") as f:\r\n            f.write(\"噸數=%s\\n\" % type)\r\n            f.write(\"型式:%s\\n\" % travel_type)\r\n            f.write(\"本次行程=%s\\n\" % specifications_travel_value)\r\n            f.write(\"本次閉合工作高度=%s\\n\" % specifications_close_working_height_value)\r\n            f.write(\"行程=%s\\n\" % alpha)\r\n            f.write(\"閉合工作高度=%s\\n\" % beta)\r\n            f.write(\"喉部拉高量=%s\\n\" % zeta)\r\n            f.write(\"牙球伸長量=%s\\n\" % epsilon)\r\n\r\n    def create_dir(self, type):  # 創建資料夾\r\n        time_now = datetime.datetime.now()\r\n        dir_name = '{}_{}_{}_{}_{}'.format(type, time_now.day, time_now.hour, time_now.minute, time_now.second)\r\n        desktop = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')\r\n        test = os.path.join('Z:')\r\n        path = desktop + '\\\\' + dir_name\r\n        os.mkdir(path)\r\n        machining = path + \"\\\\\" + \"machining\"\r\n        os.mkdir(machining)\r\n        welding = path + \"\\\\\" + \"welding\"\r\n        os.mkdir(welding)\r\n        self.path = path\r\n        self.machining = machining\r\n        self.welding = welding\r\n\r\n    def finish(self, machining_file_change_error, welding_file_change_error):\r\n        Form = QtWidgets.QWidget()\r\n        Form.setWindowTitle('oxxo.studio')\r\n        Form.resize(500, 200)\r\n        mbox = QtWidgets.QMessageBox(Form)\r\n        mbox.information(Form, '完成', '生成完成\\nmachining_file_change_error:%s\\nwelding_file_change_error:%s\\n' % (\r\n            machining_file_change_error, welding_file_change_error))\r\n        self.ui.lineEdit_5.clear()\r\n        self.ui.lineEdit_2.clear()\r\n\r\n    def label_7_change_data(self):\r\n        label_7_data = {250: {\"S\": \"標準:80\", \"H\": (\"標準:50\"), \"P\": (\"標準:35\")},\r\n                        350: {\"S\": (\"標準:90\"), \"H\": (\"標準:60\"), \"P\": (\"標準:40\")},\r\n                        450: {\"S\": (\"標準:110\"), \"H\": (\"標準:70\"), \"P\": (\"標準:45\")},\r\n                        600: {\"S\": (\"標準:130\"), \"H\": (\"標準:80\"), \"P\": (\"標準:50\")},\r\n                        800: {\"S\": (\"標準:150\"), \"H\": (\"標準:100\"), \"P\": (\"標準:60\")},\r\n                        1100: {\"S\": (\"標準:180\"), \"H\": (\"標準:110\"), \"P\": (\"標準:70\")},\r\n                        1600: {\"S\": (\"標準:200\"), \"H\": (\"標準:130\"), \"P\": (\"標準:80\")},\r\n                        2000: {\"S\": (\"標準:220\"), \"H\": (\"標準:150\"), \"P\": (\"標準:90\")},\r\n                        2500: {\"S\": (\"標準:250\"), \"H\": (\"標準:180\"), \"P\": (\"標準:100\")},\r\n                        }\r\n        return label_7_data\r\n\r\n    def change_label_7(self):\r\n        label_7_data = self.label_7_change_data()\r\n        type = str(self.ui.comboBox_4.currentText())\r\n        travel_type = str(self.ui.comboBox_2.currentText())\r\n        ton = int(type.split('-')[-1] + '0')\r\n        travel_standard = label_7_data[ton][travel_type]\r\n        travel_standard = str(travel_standard)\r\n\r\n        self.ui.label_7.clear()\r\n        self.ui.label_7.setText(travel_standard)\r\n\r\n    def label_9_data(self):\r\n        label_9_data = {250: {\"S\": (\"標準:230\"), \"H\": (\"標準:200\"), \"P\": (\"標準:200\")},\r\n                        350: {\"S\": (\"標準:250\"), \"H\": (\"標準:220\"), \"P\": (\"標準:220\")},\r\n                        450: {\"S\": (\"標準:270\"), \"H\": (\"標準:240\"), \"P\": (\"標準:240\")},\r\n                        600: {\"S\": (\"標準:300\"), \"H\": (\"標準:270\"), \"P\": (\"標準:270\")},\r\n                        800: {\"S\": (\"標準:330\"), \"H\": (\"標準:300\"), \"P\": (\"標準:300\")},\r\n                        1100: {\"S\": (\"標準:350\"), \"H\": (\"標準:320\"), \"P\": (\"標準:320\")},\r\n                        1600: {\"S\": (\"標準:400\"), \"H\": (\"標準:360\"), \"P\": (\"標準:360\")},\r\n                        2000: {\"S\": (\"標準:450\"), \"H\": (\"標準:400\"), \"P\": (\"標準:400\")},\r\n                        2500: {\"S\": (\"標準:450\"), \"H\": (\"標準:400\"), \"P\": (\"標準:400\")}, }\r\n\r\n        return label_9_data\r\n\r\n    def change_label_9(self):\r\n        label_9_data = self.label_9_data()\r\n        type = str(self.ui.comboBox_4.currentText())\r\n        travel_type = str(self.ui.comboBox_2.currentText())\r\n        ton = int(type.split('-')[-1] + '0')\r\n        close_h = label_9_data[ton][travel_type]\r\n        close_h = str(close_h)\r\n\r\n        self.ui.label_9.clear()\r\n        self.ui.label_9.setText(close_h)\r\n\r\n    def change_dir(self, stamping_press_type, p, alpha, beta, zeta, epsilon, machining, welding, travel_type):\r\n        start_time = time.time()\r\n        all_part_name = {}\r\n        all_part_value = {}\r\n        all_parameter_save = {}\r\n        all_parameter_value = {}\r\n        # 開啟CATIA\r\n        env = mprog.set_CATIA_workbench_env()\r\n        machining_file_change_error = []\r\n        machining_file_change_pass = []\r\n        welding_file_change_error = []\r\n        welding_file_change_pass = []\r\n        # 開啟零件檔更改變數後儲存並關閉\r\n        for name in epc.ExcelOp('尺寸整理表', '沖床機架零件清單').get_col_cell(1):\r\n            print(name)\r\n            file_list_name, file_list_value = epc.ExcelOp('尺寸整理表', '沖床機架零件清單').get_sheet_par('沖床機架零件清單', stamping_press_type)\r\n            file_list_name_index = file_list_name.index(name)\r\n            if file_list_value[file_list_name_index] == 0:\r\n                pass\r\n            else:\r\n                try:\r\n                    # 保存原始的sys.stdout\r\n                    original_stdout = sys.stdout\r\n                    # 创建一个新的StringIO对象来捕获输出\r\n                    captured_output = StringIO()\r\n                    sys.stdout = captured_output\r\n                    if name == 'PANEL' or name == 'CON_ROD' or name == 'CON_ROD_BASE' or name == 'CON_ROD_CAP' or name == 'INVERTERBRACKET' \\\r\n                            or name == 'POINTER' or name == 'COVER' or name == 'PLUG' or name == 'feeding_shaft_cover' or name == 'OIL_LEVEL_GAUGE' \\\r\n                            or name == 'slide_gib' or name == 'ELECTRIC_BOX_PLATE' or name == 'MOUNT_FILTER'or name == 'CONTROL_PANEL' or name == 'PANEL_BOX'\\\r\n                            or name == 'PANEL_BOX_BRACKET' or name == 'ELECTRIC_BOX' or name == 'GUARD_FLYWHEEL' or name == 'NAME_PLATE'\\\r\n                            or name == 'TRADEMARK_NAMEPLATE'or name == 'OPERATION_BOX':\r\n                        # 讀取其餘STP檔\r\n                        S_i.STP(name, stamping_press_type, machining)\r\n                        continue\r\n                    else:\r\n                        # 讀取機架零件\r\n                        mprog.import_part(fp.system_root + fp.DEMO_part, name)\r\n                    if name == 'FRAME52' and p == 0:\r\n                        try:\r\n                            mprog.param_change(name, \"alpha\", alpha)\r\n                            mprog.param_change(name, \"beta\", beta)\r\n                            mprog.param_change(name, 'zeta', zeta)\r\n                        except:\r\n                            pass\r\n                        # 加工圖零件\r\n                        parameter_name, parameter_value = mptc.change_machining_parameter(name, stamping_press_type, 0, travel_type)\r\n                        all_part_name[name] = parameter_name\r\n                        all_part_value[name] = parameter_value\r\n                        for x in range(len(parameter_name)):\r\n                            all_parameter_save.setdefault(parameter_name[x], parameter_value[x])\r\n                            all_parameter_list = all_parameter_save.copy()\r\n                            all_parameter_value[name] = all_parameter_list\r\n                            apv = all_parameter_value\r\n                        all_parameter_save.clear()\r\n\r\n                        # 恢复原始的sys.stdout\r\n                        sys.stdout = original_stdout\r\n                        # 从捕获的输出中获取文本\r\n                        output_text = captured_output.getvalue()\r\n\r\n                        # 判断文本内容\r\n                        if \"error\" in output_text:\r\n                            machining_file_change_error.append(name)\r\n                        else:\r\n                            machining_file_change_pass.append(name)\r\n                            # mprog.close_file(name)\r\n                    else:\r\n                        try:\r\n                            mprog.param_change(name, \"alpha\", alpha)\r\n                            mprog.param_change(name, \"beta\", beta)\r\n                            mprog.param_change(name, 'zeta', zeta)\r\n                        except:\r\n                            pass\r\n\r\n                        # 加工圖零件\r\n                        parameter_name, parameter_value = mptc.change_machining_parameter(name, stamping_press_type, 1, travel_type)\r\n                        all_part_name[name] = parameter_name\r\n                        all_part_value[name] = parameter_value\r\n                        for x in range(len(parameter_name)):\r\n                            all_parameter_save.setdefault(parameter_name[x], parameter_value[x])\r\n                            all_parameter_list = all_parameter_save.copy()\r\n                            all_parameter_value[name] = all_parameter_list\r\n                            apv = all_parameter_value\r\n                        all_parameter_save.clear()\r\n\r\n                        # 恢复原始的sys.stdout\r\n                        sys.stdout = original_stdout\r\n                        output_text = captured_output.getvalue()\r\n                        # 判断文本内容\r\n                        if \"error\" in output_text:\r\n                            machining_file_change_error.append(name)\r\n                        else:\r\n                            machining_file_change_pass.append(name)\r\n                    # 儲存加工圖零件檔\r\n                    mprog.save_file_stp(machining, name)\r\n                    mprog.save_stpfile_part(machining, name)\r\n                    # 進行裁料圖特徵變更\r\n                    wptc.change_welding_feature(name, stamping_press_type)\r\n                    print(output_text)\r\n                    if \"error\" in output_text:\r\n                        welding_file_change_error.append(name)\r\n                    else:\r\n                        welding_file_change_pass.append(name)\r\n                    # 儲存裁料圖零件檔\r\n                    mprog.save_file_stp(welding, name)\r\n                    mprog.save_stpfile_part(welding, name)\r\n                    mprog.close_file(name)\r\n                except:\r\n                    pass\r\n        print(stamping_press_type)\r\n        print('all_part_name', all_part_name)\r\n        print('all_part_value', all_part_value)\r\n        print('machining_file_change_error', machining_file_change_error)\r\n        print('machining_file_change_pass', machining_file_change_pass)\r\n        print('welding_file_change_error', welding_file_change_error)\r\n        print('welding_file_change_pass', welding_file_change_pass)\r\n        print('總用時%s' % (time.time() - start_time))  # 建立3D組立\r\n        Ad.assembly(stamping_press_type, apv, self.path, alpha, beta, zeta)\r\n\r\n        return machining_file_change_error, welding_file_change_error\r\n\r\n\r\n# 平板第一頁\r\nclass plate_first_windows(QtWidgets.QWidget):\r\n    def __init__(self, stamping_press_type):\r\n        super().__init__()\r\n        self.ui = pad_main_simple_form()\r\n        self.ui.setupUi(self)\r\n        self.setWindowTitle('平板')\r\n        self.ui.pad_select.currentIndexChanged.connect(lambda: self.select_plate_type_name(stamping_press_type))\r\n        self.ui.plate_start.clicked.connect(lambda: self.start(stamping_press_type))\r\n\r\n\r\n    # 選擇平板類型\r\n    def select_plate_type_name(self, stamping_press_type):\r\n        get_pad_select_name = self.ui.pad_select.currentText()\r\n        if get_pad_select_name == \"特殊平板\":\r\n            self.hide()\r\n            self.nw = pad_secend_windows(stamping_press_type)\r\n            self.nw.show()\r\n\r\n    def start(self, stamping_press_type):\r\n        par.plate_normal_name = [self.ui.pad_select.currentText()]\r\n        # 判斷模墊型\r\n        if par.plate_normal_name[0] == \"標準模墊型\":\r\n            if stamping_press_type == 0:\r\n                par.total_t_slot_h_type = ['貫穿', '分段', '貫穿']\r\n                par.total_position_y = [100, 0, -100]\r\n                par.total_LL = ['', 185, '']\r\n                par.total_LR = ['', 185, '']\r\n                par.t_all_dimension = [22, 38, 23, 16]\r\n            elif stamping_press_type == 1:\r\n                par.total_t_slot_h_type = ['貫穿', '分段', '貫穿']\r\n                par.total_position_y = [125, 0, -125]\r\n                par.total_LL = ['', 210, '']\r\n                par.total_LR = ['', 210, '']\r\n                par.t_all_dimension = [22, 38, 23, 16]\r\n            elif stamping_press_type == 2:\r\n                par.total_t_slot_h_type = ['貫穿', '分段', '貫穿']\r\n                par.total_position_y = [140, 0, -140]\r\n                par.total_LL = ['', 220, '']\r\n                par.total_LR = ['', 220, '']\r\n                par.t_all_dimension = [22, 38, 23, 16]\r\n            elif stamping_press_type == 3:\r\n                par.total_t_slot_h_type = ['貫穿', '分段', '貫穿']\r\n                par.total_position_y = [150, 0, -150]\r\n                par.total_LL = ['', 240, '']\r\n                par.total_LR = ['', 240, '']\r\n                par.t_all_dimension = [22, 38, 23, 16]\r\n            elif stamping_press_type == 4:\r\n                par.total_t_slot_h_type = ['貫穿', '分段', '貫穿']\r\n                par.total_position_y = [180, 0, -180]\r\n                par.total_LL = ['', 270, '']\r\n                par.total_LR = ['', 270, '']\r\n                par.t_all_dimension = [28, 48, 30, 20]\r\n            elif stamping_press_type == 5:\r\n                par.total_t_slot_h_type = ['貫穿', '分段', '貫穿']\r\n                par.total_position_y = [210, 0, -210]\r\n                par.total_LL = ['', 280, '']\r\n                par.total_LR = ['', 280, '']\r\n                par.t_all_dimension = [28, 48, 30, 20]\r\n            elif stamping_press_type == 6:\r\n                par.total_t_slot_h_type = ['貫穿', '分段', '分段', '分段', '貫穿']\r\n                par.total_position_y = [290, 165, 0, -165, -290]\r\n                par.total_LL = ['', 290, 290, 290, '']\r\n                par.total_LR = ['', 290, 290, 290, '']\r\n                par.t_all_dimension = [28, 48, 30, 20]\r\n            elif stamping_press_type == 7:\r\n                par.total_t_slot_h_type = ['貫穿', '分段', '分段', '分段', '貫穿']\r\n                par.total_position_y = [320, 180, 0, -180, -320]\r\n                par.total_LL = ['', 320, 320, 320, '']\r\n                par.total_LR = ['', 320, 320, 320, '']\r\n                par.t_all_dimension = [28, 48, 30, 20]\r\n            elif stamping_press_type == 8:\r\n                par.total_t_slot_h_type = ['貫穿', '分段', '分段', '分段', '貫穿']\r\n                par.total_position_y = [350, 200, 0, -200, -350]\r\n                par.total_LL = ['', 320, 320, 320, '']\r\n                par.total_LR = ['', 320, 320, 320, '']\r\n                par.t_all_dimension = [28, 48, 30, 20]\r\n        else:\r\n            # 判斷下料孔\r\n            if '圓孔' in par.plate_normal_name[0]:\r\n                if stamping_press_type == 0:\r\n                    par.cutout_part_dimension = [100, '', '', '', '']\r\n                elif stamping_press_type == 1:\r\n                    par.cutout_part_dimension = [110, '', '', '', '']\r\n                elif stamping_press_type == 2:\r\n                    par.cutout_part_dimension = [130, '', '', '', '']\r\n                elif stamping_press_type == 3:\r\n                    par.cutout_part_dimension = [150, '', '', '', '']\r\n                elif stamping_press_type == 4:\r\n                    par.cutout_part_dimension = [180, '', '', '', '']\r\n                elif stamping_press_type == 5:\r\n                    par.cutout_part_dimension = [200, '', '', '', '']\r\n                elif stamping_press_type == 6:\r\n                    par.cutout_part_dimension = [220, '', '', '', '']\r\n                elif stamping_press_type == 7:\r\n                    par.cutout_part_dimension = [250, '', '', '', '']\r\n                elif stamping_press_type == 8:\r\n                    par.cutout_part_dimension = [270, '', '', '', '']\r\n            elif '方孔' in par.plate_normal_name[0]:\r\n                if stamping_press_type == 0:\r\n                    par.cutout_part_dimension = [200, 100, '', '', '']\r\n                    par.cutout_spuare_R = [20]\r\n                elif stamping_press_type == 1:\r\n                    par.cutout_part_dimension = [220, 110, '', '', '']\r\n                    par.cutout_spuare_R = [25]\r\n                elif stamping_press_type == 2:\r\n                    par.cutout_part_dimension = [260, 130, '', '', '']\r\n                    par.cutout_spuare_R = [25]\r\n                elif stamping_press_type == 3:\r\n                    par.cutout_part_dimension = [300, 150, '', '', '']\r\n                    par.cutout_spuare_R = [30]\r\n                elif stamping_press_type == 4:\r\n                    par.cutout_part_dimension = [360, 180, '', '', '']\r\n                    par.cutout_spuare_R = [35]\r\n                elif stamping_press_type == 5:\r\n                    par.cutout_part_dimension = [400, 200, '', '', '']\r\n                    par.cutout_spuare_R = [40]\r\n                elif stamping_press_type == 6:\r\n                    par.cutout_part_dimension = [440, 220, '', '', '']\r\n                    par.cutout_spuare_R = [45]\r\n                elif stamping_press_type == 7:\r\n                    par.cutout_part_dimension = [500, 250, '', '', '']\r\n                    par.cutout_spuare_R = [50]\r\n                elif stamping_press_type == 8:\r\n                    par.cutout_part_dimension = [540, 270, '', '', '']\r\n                    par.cutout_spuare_R = [55]\r\n            # 判斷T溝\r\n            if stamping_press_type == 0:\r\n                par.total_t_slot_h_type = ['貫穿', '貫穿', '貫穿']\r\n                par.total_position_y = [100, 0, -100]\r\n                par.t_all_dimension = [22, 38, 23, 16]\r\n            elif stamping_press_type == 1:\r\n                par.total_t_slot_h_type = ['貫穿', '貫穿', '貫穿']\r\n                par.total_position_y = [125, 0, -125]\r\n                par.t_all_dimension = [22, 38, 23, 16]\r\n            elif stamping_press_type == 2:\r\n                par.total_t_slot_h_type = ['貫穿', '貫穿', '貫穿']\r\n                par.total_position_y = [140, 0, -140]\r\n                par.t_all_dimension = [22, 38, 23, 16]\r\n            elif stamping_press_type == 3:\r\n                par.total_t_slot_h_type = ['貫穿', '貫穿', '貫穿']\r\n                par.total_position_y = [150, 0, -150]\r\n                par.t_all_dimension = [22, 38, 23, 16]\r\n            elif stamping_press_type == 4:\r\n                par.total_t_slot_h_type = ['貫穿', '貫穿', '貫穿']\r\n                par.total_position_y = [180, 0, -180]\r\n                par.t_all_dimension = [28, 48, 30, 20]\r\n            elif stamping_press_type == 5:\r\n                par.total_t_slot_h_type = ['貫穿', '貫穿', '貫穿']\r\n                par.total_position_y = [210, 0, -210]\r\n                par.t_all_dimension = [28, 48, 30, 20]\r\n            elif stamping_press_type == 6:\r\n                par.total_t_slot_h_type = ['貫穿', '貫穿', '貫穿', '貫穿', '貫穿']\r\n                par.total_position_y = [290, 165, 0, -165, -290]\r\n                par.t_all_dimension = [28, 48, 30, 20]\r\n            elif stamping_press_type == 7:\r\n                par.total_t_slot_h_type = ['貫穿', '貫穿', '貫穿', '貫穿', '貫穿']\r\n                par.total_position_y = [320, 180, 0, -180, -320]\r\n                par.t_all_dimension = [28, 48, 30, 20]\r\n            elif stamping_press_type == 8:\r\n                par.total_t_slot_h_type = ['貫穿', '貫穿', '貫穿', '貫穿', '貫穿']\r\n                par.total_position_y = [350, 200, 0, -200, -350]\r\n                par.t_all_dimension = [28, 48, 30, 20]\r\n        # 連結到平板第二頁的函式進行生成\r\n        path = pad_secend_windows.start(stamping_press_type, stamping_press_type)\r\n        # T溝\r\n        pad_secend_windows.t_solt(stamping_press_type, path)\r\n        # 下料孔\r\n        pad_secend_windows.plate_hole(stamping_press_type, stamping_press_type, path)\r\n        # 關閉實體外所有東西\r\n        mprog.Close_All()\r\n        # 平板存檔\r\n        mprog.save_file_stp(path, 'plate')\r\n        mprog.save_stpfile_part(path, 'plate')\r\n\r\n\r\n# 平板第二頁\r\nclass pad_secend_windows(QtWidgets.QWidget):\r\n    def __init__(self, stamping_press_type):\r\n        super().__init__()\r\n        self.ui = pad_main_Form()\r\n        self.ui.setupUi(self)\r\n        self.setWindowTitle('平板')\r\n        # 切換平板第一頁\r\n        self.ui.pad_select.currentIndexChanged.connect(lambda: self.switch_to_first_plate_windows(stamping_press_type))\r\n        self.ui.pad_select.setCurrentText('特殊平板')\r\n        # 下料孔\r\n        self.ui.remove_type.currentIndexChanged.connect(self.cutout_parameter_change)\r\n        self.ui.removetable.verticalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)\r\n        self.ui.removetable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)\r\n        self.ui.removetable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)\r\n        self.ui.removetable.verticalHeader().setVisible(False)\r\n        # 平板面積\r\n        self.plate_type(stamping_press_type)\r\n        self.ui.pad_extrasize.currentIndexChanged.connect(lambda: self.plate_area_dimension(stamping_press_type))\r\n        self.ui.LR.setText(str(par.plate_length[stamping_press_type]))\r\n        self.ui.FB.setText(str(par.plate_width[stamping_press_type]))\r\n        # T溝\r\n        for number in range(0, 4):\r\n            self.ui.t_solttable.setItem(number, 0, QTableWidgetItem(par.t_table_dimension_parameter[number]))\r\n        self.ui.t_solttable.verticalHeader().setVisible(False)\r\n        self.ui.t_solttable.horizontalHeader().setVisible(False)\r\n        # 設定T_solt表格內容\r\n        self.T_solt_table_normel_setup()\r\n        for number in range(1, 10):\r\n            newItem = QTableWidgetItem(\"-\")\r\n            self.ui.t_solttable.setItem(number, 1, newItem)\r\n        self.ui.t_solttable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)\r\n        self.ui.t_solttable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)\r\n        self.ui.t_solttable.verticalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)\r\n        self.ui.t_solt_type.currentIndexChanged.connect(self.T_solt_combobox_change)\r\n        self.ui.plate_start.clicked.connect(lambda: self.start(stamping_press_type))\r\n        self.ui.t_machining.clicked.connect(lambda: self.showpadmachiningwindows(stamping_press_type))\r\n        self.ui.remove_machining.clicked.connect(lambda: self.showcutoutmachiningwindows(stamping_press_type))\r\n        self.chack_plate_table()\r\n\r\n    def switch_to_first_plate_windows(self, stamping_press_type):\r\n        if self.ui.pad_select.currentText() != \"特殊平板\":\r\n            self.hide()\r\n            self.nw = plate_first_windows(stamping_press_type)\r\n            self.nw.show()\r\n\r\n    def plate_area_dimension(self, stamping_press_type):\r\n        get_pad_select_name = self.ui.pad_select.currentText()\r\n        get_pad_area_name = self.ui.pad_extrasize.currentText()\r\n        if get_pad_select_name == \"特殊平板\":\r\n            if get_pad_area_name == '標準':\r\n                LR_value = str(par.plate_length[stamping_press_type])\r\n                FB_value = str(par.plate_width[stamping_press_type])\r\n            elif get_pad_area_name == '加大I型':\r\n                LR_value = str(par.plate_length[stamping_press_type] + par.plate_lv1[stamping_press_type])\r\n                FB_value = str(par.plate_width[stamping_press_type])\r\n            elif get_pad_area_name == '加大II型':\r\n                LR_value = str(par.plate_length[stamping_press_type] + par.plate_lv2[stamping_press_type])\r\n                FB_value = str(par.plate_width[stamping_press_type])\r\n            par.plate_special_type = [get_pad_area_name]\r\n            # 設定最終的 LR 和 FB 值\r\n            self.ui.LR.setText(LR_value)\r\n            self.ui.FB.setText(FB_value)\r\n        else:\r\n            self.ui.LR.clear()\r\n            self.ui.FB.clear()\r\n\r\n    def plate_type(self, stamping_press_type):\r\n        for number in range(0, 10):\r\n            self.ui.pad_select.setItemText(number, str(par.plate_type[number]) + '(' + str(\r\n                par.plate_length[stamping_press_type]) + 'x' + str(par.plate_width[stamping_press_type]) + \")\")\r\n\r\n    def T_solt_table_normel_setup(self):\r\n        # 設定T_solt表格內容\r\n        # 第一行\r\n        newItem = QTableWidgetItem(\"尺寸代號\")\r\n        self.ui.t_solttable.setItem(0, 0, newItem)\r\n        newItem = QTableWidgetItem(\"尺寸\")\r\n        self.ui.t_solttable.setItem(0, 1, newItem)\r\n        newItem = QTableWidgetItem(\"公差\")\r\n        self.ui.t_solttable.setItem(0, 2, newItem)\r\n        # 第一列\r\n        self.ui.t_solttable.setSpan(1, 0, 2, 1)\r\n        newItem = QTableWidgetItem(\"A\")\r\n        self.ui.t_solttable.setItem(1, 0, newItem)\r\n        self.ui.t_solttable.setSpan(3, 0, 2, 1)\r\n        newItem = QTableWidgetItem(\"B\")\r\n        self.ui.t_solttable.setItem(3, 0, newItem)\r\n        self.ui.t_solttable.setSpan(5, 0, 2, 1)\r\n        newItem = QTableWidgetItem(\"C\")\r\n        self.ui.t_solttable.setItem(5, 0, newItem)\r\n        self.ui.t_solttable.setSpan(7, 0, 2, 1)\r\n        newItem = QTableWidgetItem(\"D\")\r\n        self.ui.t_solttable.setItem(7, 0, newItem)\r\n        # 第二列\r\n        self.ui.t_solttable.setSpan(1, 1, 2, 1)\r\n        self.ui.t_solttable.setSpan(3, 1, 2, 1)\r\n        self.ui.t_solttable.setSpan(5, 1, 2, 1)\r\n        self.ui.t_solttable.setSpan(7, 1, 2, 1)\r\n        # 第三列\r\n        newItem = QTableWidgetItem(\"+1\")\r\n        self.ui.t_solttable.setItem(1, 2, newItem)\r\n        newItem = QTableWidgetItem(\"0\")\r\n        self.ui.t_solttable.setItem(2, 2, newItem)\r\n        newItem = QTableWidgetItem(\"+1\")\r\n        self.ui.t_solttable.setItem(3, 2, newItem)\r\n        newItem = QTableWidgetItem(\"-1\")\r\n        self.ui.t_solttable.setItem(4, 2, newItem)\r\n        newItem = QTableWidgetItem(\"+0.25\")\r\n        self.ui.t_solttable.setItem(5, 2, newItem)\r\n        newItem = QTableWidgetItem(\"-0.25\")\r\n        self.ui.t_solttable.setItem(6, 2, newItem)\r\n        newItem = QTableWidgetItem(\"+2\")\r\n        self.ui.t_solttable.setItem(7, 2, newItem)\r\n        newItem = QTableWidgetItem(\"0\")\r\n        self.ui.t_solttable.setItem(8, 2, newItem)\r\n\r\n    def T_solt_combobox_change(self):\r\n        t_solt_type = self.ui.t_solt_type.currentText()\r\n        if t_solt_type == \"T溝代號:F(SN1-25~60標準)\" or t_solt_type == \"T溝代號:G(SN1-180~250標準)\":\r\n            if t_solt_type == \"T溝代號:F(SN1-25~60標準)\":\r\n                self.ui.removepicture_2.setPixmap(QtGui.QPixmap(\"T溝詳圖_F.png\"))\r\n            elif t_solt_type == \"T溝代號:G(SN1-180~250標準)\":\r\n                self.ui.removepicture_2.setPixmap(QtGui.QPixmap(\"T溝詳圖_G.png\"))\r\n            for number in range(1, 10):\r\n                newItem = QTableWidgetItem(\"-\")\r\n                self.ui.t_solttable.setItem(number, 1, newItem)\r\n        elif t_solt_type == \"特殊T溝\":\r\n            self.ui.removepicture_2.setPixmap(QtGui.QPixmap(\"T溝詳圖.png\"))\r\n            for number in range(1, 10):\r\n                newItem = QTableWidgetItem(\"\")\r\n                self.ui.t_solttable.setItem(number, 1, newItem)\r\n        for number in range(0, 10):\r\n            for number2 in range(0, 3):\r\n                item = self.ui.t_solttable.item(number, number2)\r\n                if item is not None:\r\n                    item.setFlags(item.flags() & ~QtCore.Qt.ItemIsEditable)\r\n        if self.ui.t_solt_type.currentText() == '特殊T溝':\r\n            for number in range(1, 10):\r\n                item = self.ui.t_solttable.item(number, 1)\r\n                if item is not None:\r\n                    item.setFlags(item.flags() | QtCore.Qt.ItemIsEditable)\r\n                    self.ui.t_solttable.setEditTriggers(QtWidgets.QAbstractItemView.AllEditTriggers)\r\n\r\n    def chack_plate_table(self):\r\n        if len(par.plate_hole_type) != 0:\r\n            if par.plate_hole_type[0] == '圓孔':\r\n                self.ui.remove_type.setCurrentIndex(1)\r\n                self.ui.removetable.setItem(0, 0, QTableWidgetItem(par.cutout_parameter_circle[0]))\r\n                self.ui.removetable.setItem(0, 1, QTableWidgetItem(par.cutout_part_dimension[0]))\r\n            if par.plate_hole_type[0] == '方孔':\r\n                self.ui.remove_type.setCurrentIndex(2)\r\n                for i in range(0, 2):\r\n                    self.ui.removetable.setItem(i, 0, QTableWidgetItem(par.cutout_parameter_square[i]))\r\n                    self.ui.removetable.setItem(i, 1, QTableWidgetItem(par.cutout_part_dimension[i]))\r\n            if par.plate_hole_type[0] == '漏斗型':\r\n                self.ui.remove_type.setCurrentIndex(3)\r\n                for i in range(0, 5):\r\n                    self.ui.removetable.setItem(i, 0, QTableWidgetItem(par.cutout_parameter_funnel[i]))\r\n                    self.ui.removetable.setItem(i, 1, QTableWidgetItem(par.cutout_part_dimension[i]))\r\n\r\n    # def showpaddimensionwindows(self, stamping_press_type):\r\n    #     self.hide()\r\n    #     self.nw = pad_dimension(stamping_press_type)\r\n    #     self.nw.show()\r\n\r\n    def showpadmachiningwindows(self, stamping_press_type):\r\n        t_solt_type = self.ui.t_solt_type.currentText()\r\n        if t_solt_type == \"T溝代號:F(SN1-25~60標準)\":\r\n            par.t_all_dimension = [22, 38, 23, 16]\r\n        elif t_solt_type == \"T溝代號:G(SN180~250標準)\":\r\n            par.t_all_dimension = [28, 48, 30, 20]\r\n        elif t_solt_type == \"特殊T溝\":\r\n            for value in range(1, 9, 2):\r\n                par.t_all_dimension.append(self.ui.t_solttable.item(value, 1).text())\r\n        plate_type_select = self.ui.pad_extrasize.currentText()\r\n        if plate_type_select == '標準':\r\n            plate_lenght = par.plate_length[stamping_press_type]\r\n            plate_width = par.plate_width[stamping_press_type]\r\n        elif plate_type_select == '加大I型':\r\n            plate_lenght = par.plate_length[stamping_press_type] + par.plate_lv1[stamping_press_type]\r\n            plate_width = par.plate_width[stamping_press_type]\r\n        elif plate_type_select == '加大II型':\r\n            plate_lenght = par.plate_length[stamping_press_type] + par.plate_lv2[stamping_press_type]\r\n            plate_width = par.plate_width[stamping_press_type]\r\n\r\n        self.hide()\r\n        self.nw = t_machining(stamping_press_type, plate_lenght, plate_width)\r\n        self.nw.show()\r\n\r\n    def showcutoutmachiningwindows(self, i):\r\n        par.plate_hole_type = [self.ui.remove_type.currentText()]\r\n        for turn in range(0, 5):\r\n            par.cutout_part_dimension[turn] = (self.ui.removetable.item(turn, 1).text())\r\n        print(par.cutout_part_dimension)\r\n        if par.plate_hole_type == '漏斗型':\r\n            if int(par.cutout_part_dimension[0]) < int(par.cutout_part_dimension[1]) or int(\r\n                    par.cutout_part_dimension[2]) < int(par.cutout_part_dimension[3]):\r\n                print('error')\r\n        self.hide()\r\n        self.nw = cutout_hole_machining(i)\r\n        self.nw.show()\r\n\r\n    # def showremovemachiningwindows(self, stamping_press_type):\r\n    #     self.hide()\r\n    #     self.nw = remove_machining(stamping_press_type)\r\n    #     self.nw.show()\r\n\r\n    # 下料孔形狀選單連動功能\r\n    def cutout_parameter_change(self):\r\n        translate = QtCore.QCoreApplication.translate\r\n        cutout_type = self.ui.remove_type.currentText()\r\n        for number in range(0, 5):\r\n            self.ui.removetable.setItem(number, 0, QTableWidgetItem(''))\r\n            self.ui.removetable.setItem(number, 1, QTableWidgetItem(''))\r\n        if cutout_type == '無孔':\r\n            self.ui.removepicture.setPixmap(QtGui.QPixmap(\"cutout_shape_A.png\"))\r\n            self.ui.remove_machining.setDisabled(True)\r\n        if cutout_type == '圓孔':\r\n            self.ui.removepicture.setPixmap(QtGui.QPixmap(\"cutout_shape_B.png\"))\r\n            self.ui.remove_machining.setDisabled(False)\r\n            self.ui.removetable.setItem(0, 0, QTableWidgetItem('HD'))\r\n        if cutout_type == '方孔':\r\n            self.ui.removepicture.setPixmap(QtGui.QPixmap(\"cutout_shape_C.png\"))\r\n            self.ui.remove_machining.setDisabled(False)\r\n            self.ui.removetable.setItem(0, 0, QTableWidgetItem('HLR'))\r\n            self.ui.removetable.setItem(1, 0, QTableWidgetItem('HFB'))\r\n        if cutout_type == '漏斗型':\r\n            self.ui.removepicture.setPixmap(QtGui.QPixmap(\"cutout_shape_D.png\"))\r\n            self.ui.remove_machining.setDisabled(False)\r\n            self.ui.removetable.setItem(0, 0, QTableWidgetItem('HULR'))\r\n            self.ui.removetable.setItem(1, 0, QTableWidgetItem('HDLR'))\r\n            self.ui.removetable.setItem(2, 0, QTableWidgetItem('HUFB'))\r\n            self.ui.removetable.setItem(3, 0, QTableWidgetItem('HDFB'))\r\n            self.ui.removetable.setItem(4, 0, QTableWidgetItem('HH'))\r\n        if cutout_type == '模墊型':\r\n            self.ui.removepicture.setPixmap(QtGui.QPixmap(\"cutout_shape_E.png\"))\r\n            self.ui.remove_machining.setDisabled(True)\r\n        for number in range(0, 5):\r\n            item = self.ui.removetable.item(number, 0)\r\n            if item is not None:\r\n                item.setFlags(item.flags() & ~QtCore.Qt.ItemIsEditable)\r\n\r\n    def start(self, stamping_press_type):\r\n        # 對平板進行變數\r\n        path = FolderManager('plate').path\r\n        path = str(path)\r\n        mprog.set_CATIA_workbench_env()\r\n        mprog.import_part(fp.system_root + fp.DEMO_part, 'plate')\r\n        plate_name, plate_value = pdp.padchange(stamping_press_type)\r\n        for name in plate_name:\r\n            par.plate_all_parameter[name] = plate_value[plate_name.index(name)]\r\n        print(par.plate_all_parameter)\r\n        if len(par.plate_normal_name) != 0:\r\n            if '加大I型' in par.plate_normal_name[0]:\r\n                par.lv = [par.plate_lv1[stamping_press_type]]\r\n                mprog.param_change('plate', 'LV', par.lv[0])\r\n            elif '加大II型' in par.plate_normal_name[0]:\r\n                par.lv = [par.plate_lv2[stamping_press_type]]\r\n                mprog.param_change('plate', 'LV', par.lv[0])\r\n            else:\r\n                par.lv = [0]\r\n            if '模墊型' in par.plate_normal_name[0]:\r\n                if stamping_press_type <= 4:\r\n                    mprog.activatefeature('cutout_molded_cushion', 4)\r\n                    mprog.param_change('plate', 'cutout_molded_cushion_A',\r\n                                       par.normal_cutout_molded_cushion_A[stamping_press_type])\r\n                    mprog.param_change('plate', 'cutout_molded_cushion_B',\r\n                                       par.normal_cutout_molded_cushion_B[stamping_press_type])\r\n                    mprog.param_change('plate', 'cutout_molded_cushion_D',\r\n                                       par.normal_cutout_molded_cushion_D[stamping_press_type])\r\n                    mprog.param_change('plate', 'cutout_molded_cushion_length',\r\n                                       par.normal_cutout_molded_cushion_length[stamping_press_type])\r\n                    mprog.param_change('plate', 'cutout_molded_cushion_width',\r\n                                       par.normal_cutout_molded_cushion_width[stamping_press_type])\r\n            mprog.Update()\r\n        else:\r\n            plate_type = self.ui.pad_extrasize.currentText()\r\n            par.plate_special_type = [plate_type]\r\n            if par.plate_special_type[0] == '標準':\r\n                par.lv = [0]\r\n            elif par.plate_special_type[0] == '加大I型':\r\n                par.lv.append(par.plate_lv1[stamping_press_type])\r\n                mprog.param_change('plate', 'LV', par.lv[0])\r\n            elif par.plate_special_type[0] == '加大II型':\r\n                par.lv.append(par.plate_lv2[stamping_press_type])\r\n                mprog.param_change('plate', 'LV', par.lv[0])\r\n            # T溝程式\r\n            self.t_solt(path)\r\n            # 下料孔程式\r\n            self.plate_hole(stamping_press_type, path)\r\n            # 關閉實體外所有東西\r\n            mprog.Close_All()\r\n            # 平板存檔\r\n            mprog.save_file_stp(path, 'plate')\r\n            mprog.save_stpfile_part(path, 'plate')\r\n        return path\r\n\r\n    # T形槽\r\n    def t_solt(self, path):\r\n        # 對T溝進行變數變換\r\n        mprog.import_part(fp.system_root + fp.DEMO_part, 'T')\r\n        for t in par.t_all_dimension:\r\n            for t_name in range(len(par.t_all_dimension_name) + 1):\r\n                mprog.param_change('T', par.t_all_dimension_name[t_name], t)\r\n                break\r\n        mprog.param_change('T', 'LB', 0)\r\n        mprog.param_change('T', 'LF', 0)\r\n        mprog.param_change('T', 'SB', 0)\r\n        mprog.param_change('T', 'SF', 0)\r\n        mprog.Update()\r\n        mprog.save_file_stp(path, 'T')\r\n        mprog.save_stpfile_part(path, 'T')\r\n        mprog.close_window()\r\n\r\n        # 橫向T溝\r\n        if len(par.total_position_y) != 0:\r\n            for turn in range(0, len(par.total_position_y)):\r\n                mprog.import_part(path, 'T')\r\n                tT.changerotate(0)\r\n                mprog.param_change('T', 'A', (par.plate_all_parameter['A'] + par.lv[0]))\r\n                mprog.param_change('T', 'C', par.plate_all_parameter['C'])\r\n                if par.total_t_slot_h_type[turn] == '貫穿' or par.total_t_slot_h_type[turn] == '':\r\n                    mprog.param_change('T', 'LL', (par.plate_all_parameter['A'] + par.lv[0]))\r\n                    mprog.param_change('T', 'LR', (par.plate_all_parameter['A'] + par.lv[0]))\r\n                elif par.total_t_slot_h_type[turn] == '分段':\r\n                    mprog.param_change('T', 'LL', par.total_LL[turn])\r\n                    mprog.param_change('T', 'LR', par.total_LR[turn])\r\n                # 判斷SL和SR是否為0或空值\r\n                if len(par.total_SL) != 0:\r\n                    if par.total_SL[turn] == '' or par.total_SL[turn] == '0':\r\n                        mprog.partdeactivate('讓孔1')\r\n                        mprog.partdeactivate('讓孔倒圓角1')\r\n                    elif par.total_SL[turn] != '':\r\n                        mprog.param_change('T', 'SL', par.total_SL[turn])\r\n                else:\r\n                    mprog.partdeactivate('讓孔1')\r\n                    mprog.partdeactivate('讓孔倒圓角1')\r\n                if len(par.total_SR) != 0:\r\n                    if par.total_SR[turn] == '' or par.total_SR[turn] == '0' or len(par.total_SR) == 0:\r\n                        mprog.partdeactivate('讓孔2')\r\n                        mprog.partdeactivate('讓孔倒圓角2')\r\n                    elif par.total_SR[turn] != '':\r\n                        mprog.param_change('T', 'SR', par.total_SR[turn])\r\n                else:\r\n                    mprog.partdeactivate('讓孔2')\r\n                    mprog.partdeactivate('讓孔倒圓角2')\r\n                tT.create_t_solt((par.plate_all_parameter['B'] / 2) + par.total_position_y[turn], turn)\r\n                if len(par.total_SL) != 0:\r\n                    if par.total_SL[turn] == '' or par.total_SL[turn] == '0':\r\n                        mprog.partbodyfeatureactivate('讓孔1')\r\n                        mprog.partbodyfeatureactivate('讓孔倒圓角1')\r\n                else:\r\n                    mprog.partbodyfeatureactivate('讓孔1')\r\n                    mprog.partbodyfeatureactivate('讓孔倒圓角1')\r\n                if len(par.total_SR) != 0:\r\n                    if par.total_SR[turn] == '' or par.total_SR[turn] == '0':\r\n                        mprog.partbodyfeatureactivate('讓孔2')\r\n                        mprog.partbodyfeatureactivate('讓孔倒圓角2')\r\n                else:\r\n                    mprog.partbodyfeatureactivate('讓孔2')\r\n                    mprog.partbodyfeatureactivate('讓孔倒圓角2')\r\n                mprog.Update()\r\n                mprog.close_window()\r\n                # time.sleep(0.1)\r\n        else:\r\n            turn = 0\r\n\r\n        # 縱向T溝\r\n        if len(par.total_position_x) != 0:\r\n            if turn != 0:\r\n                mprog.param_change('T', 'LL', 0)\r\n                mprog.param_change('T', 'LR', 0)\r\n                mprog.param_change('T', 'SL', 0)\r\n                mprog.param_change('T', 'SR', 0)\r\n            for turn_2 in range(0, len(par.total_position_x)):\r\n                mprog.import_part(path, 'T')\r\n                tT.changerotate(-90)\r\n                mprog.param_change('T', 'A', par.plate_all_parameter['B'])\r\n                mprog.param_change('T', 'C', par.plate_all_parameter['C'])\r\n                if par.total_t_slot_v_type[turn_2] == '貫穿' or par.total_t_slot_v_type[turn_2] == '':\r\n                    mprog.param_change('T', 'LF', par.plate_all_parameter['B'])\r\n                    mprog.param_change('T', 'LB', par.plate_all_parameter['B'])\r\n                elif par.total_t_slot_v_type[turn_2] == '分段':\r\n                    mprog.param_change('T', 'LF', par.total_LF[turn_2])\r\n                    mprog.param_change('T', 'LB', par.total_LB[turn_2])\r\n                # 判斷SL和SR是否為0或空值\r\n                if par.total_SF[turn_2] == '' or par.total_SF[turn_2] == '0':\r\n                    mprog.partdeactivate('讓孔1')\r\n                    mprog.partdeactivate('讓孔倒圓角1')\r\n                elif par.total_SF[turn_2] != '':\r\n                    mprog.param_change('T', 'SF', par.total_SF[turn_2])\r\n                if par.total_SB[turn_2] == '' or par.total_SB[turn_2] == '0':\r\n                    mprog.partdeactivate('讓孔2')\r\n                    mprog.partdeactivate('讓孔倒圓角2')\r\n                elif par.total_SB[turn_2] != '':\r\n                    mprog.param_change('T', 'SB', par.total_SB[turn_2])\r\n                if turn == 0:\r\n                    tT.create_t_solt(\r\n                        -((par.plate_all_parameter['A'] / 2) + (par.lv[0] / 2) + par.total_position_x[turn_2]), turn_2)\r\n                else:\r\n                    tT.create_t_solt(\r\n                        -((par.plate_all_parameter['A'] / 2) + (par.lv[0] / 2) + par.total_position_x[turn_2]),\r\n                        turn_2 + turn + 1)\r\n                if par.total_SF[turn_2] == '' or par.total_SF[turn_2] == '0':\r\n                    mprog.param_change('T', 'SF', 10)\r\n                    mprog.partbodyfeatureactivate('讓孔1')\r\n                    mprog.partbodyfeatureactivate('讓孔倒圓角1')\r\n                if par.total_SB[turn_2] == '' or par.total_SB[turn_2] == '0':\r\n                    mprog.param_change('T', 'SB', 10)\r\n                    mprog.partbodyfeatureactivate('讓孔2')\r\n                    mprog.partbodyfeatureactivate('讓孔倒圓角2')\r\n                mprog.Update()\r\n                mprog.close_window()\r\n        print('T-slot create successfully')\r\n\r\n    # 下料孔\r\n    def plate_hole(self, stamping_press_type, path):\r\n        try:\r\n            par.plate_hole_type = [self.ui.remove_type.currentText()]\r\n        except:\r\n            pass\r\n        if len(par.plate_hole_type) != 0:\r\n            if par.plate_hole_type[0] != '無孔' or len(par.plate_hole_type) != 0:\r\n                par.plate_hole_type = [self.ui.remove_type.currentText()]\r\n                print(stamping_press_type)\r\n                for x in range(0, 5):\r\n                    par.cutout_part_dimension[x] = (self.ui.removetable.item(x, 1).text())\r\n                print(par.cutout_part_dimension)\r\n                print(stamping_press_type)\r\n                ch.edge_test(stamping_press_type)\r\n                # 開下料孔檔案+變數變換\r\n                if par.plate_hole_type[0] == '圓孔':\r\n                    mprog.import_part(fp.system_root + fp.DEMO_part, 'cutout_hole_circle')\r\n                    mprog.param_change('cutout_hole_circle', par.cutout_parameter_circle[0],\r\n                                       int(par.cutout_part_dimension[0]))\r\n                    mprog.param_change('cutout_hole_circle', 'C', par.plate_all_parameter['C'])\r\n                    mprog.param_change('cutout_hole_circle', 'X',\r\n                                       par.cutout_hole_machining_X - par.plate_all_parameter['A'] / 2 - par.lv[0] / 2)\r\n                    mprog.param_change('cutout_hole_circle', 'Y',\r\n                                       par.plate_all_parameter['B'] / 2 + par.cutout_hole_machining_Y)\r\n                    par.plate_hole_type[0] = 'cutout_hole_circle'\r\n                elif par.plate_hole_type[0] == '方孔':\r\n                    mprog.import_part(fp.system_root + fp.DEMO_part, 'cutout_hole_square')\r\n                    for n in range(0, 2):\r\n                        mprog.param_change('cutout_hole_square', par.cutout_parameter_square[n],\r\n                                           int(par.cutout_part_dimension[n]))\r\n                    mprog.param_change('cutout_hole_square', 'C', par.plate_all_parameter['C'])\r\n                    mprog.param_change('cutout_hole_square', 'X',\r\n                                       par.cutout_hole_machining_X - par.plate_all_parameter['A'] / 2 - par.lv[0] / 2)\r\n                    mprog.param_change('cutout_hole_square', 'Y',\r\n                                       par.plate_all_parameter['B'] / 2 + par.cutout_hole_machining_Y)\r\n                    par.plate_hole_type[0] = 'cutout_hole_square'\r\n                elif par.plate_hole_type[0] == '漏斗型':\r\n                    mprog.import_part(fp.system_root + fp.DEMO_part, 'cutout_funnel')\r\n                    for n in range(0, 5):\r\n                        mprog.param_change('cutout_funnel', par.cutout_parameter_funnel[n],\r\n                                           int(par.cutout_part_dimension[n]))\r\n                    mprog.param_change('cutout_funnel', 'C', par.plate_all_parameter['C'])\r\n                    mprog.param_change('cutout_funnel', 'X',\r\n                                       par.cutout_hole_machining_X - par.plate_all_parameter['A'] / 2 - par.lv[0] / 2)\r\n                    mprog.param_change('cutout_funnel', 'Y',\r\n                                       par.plate_all_parameter['B'] / 2 + par.cutout_hole_machining_Y)\r\n                    par.plate_hole_type[0] = 'cutout_funnel'\r\n                elif par.plate_hole_type[0] == '模墊型':\r\n                    mprog.import_part(fp.system_root + fp.DEMO_part, 'cutout_molded_cushion')\r\n                    mprog.param_change('cutout_molded_cushion', 'C', par.plate_all_parameter['C'])\r\n                    if stamping_press_type < 5:\r\n                        mprog.param_change('cutout_molded_cushion', 'A', par.cutout_molded_cushion_A[0])\r\n                        mprog.param_change('cutout_molded_cushion', 'B', par.cutout_molded_cushion_B[0])\r\n                        mprog.param_change('cutout_molded_cushion', 'D', par.cutout_molded_cushion_L[0])\r\n                    else:\r\n                        mprog.param_change('cutout_molded_cushion', 'A', par.cutout_molded_cushion_A[1])\r\n                        mprog.param_change('cutout_molded_cushion', 'B', par.cutout_molded_cushion_B[1])\r\n                        mprog.param_change('cutout_molded_cushion', 'D', par.cutout_molded_cushion_L[1])\r\n                    mprog.param_change('cutout_molded_cushion', 'width_gap', 60)\r\n                    mprog.param_change('cutout_molded_cushion', 'length_gap', 65)\r\n                    mprog.param_change('cutout_molded_cushion', 'i', par.cutout_molded_cushion_i[stamping_press_type])\r\n                    mprog.param_change('cutout_molded_cushion', 'j', par.cutout_molded_cushion_j[stamping_press_type])\r\n                    mprog.param_change('cutout_molded_cushion', 'X',\r\n                                       65 * (par.cutout_molded_cushion_i[stamping_press_type] - 1) / 2 - par.plate_all_parameter[\r\n                                           'A'] / 2 - par.lv[0] / 2)\r\n                    mprog.param_change('cutout_molded_cushion', 'Y',\r\n                                       par.plate_all_parameter['B'] / 2 - 60 * (par.cutout_molded_cushion_j[stamping_press_type] - 1) / 2)\r\n                    par.plate_hole_type[0] = 'cutout_molded_cushion'\r\n                mprog.Update()\r\n                mprog.save_file_stp(path, par.plate_hole_type[0])\r\n                mprog.save_stpfile_part(path, par.plate_hole_type[0])\r\n                tT.copybody()\r\n                tT.switch_to_window_by_name('plate.CATPart')\r\n                # 計算下料孔變數名稱\r\n                if len(par.total_position_y) != 0:\r\n                    position_y = len(par.total_position_y)\r\n                else:\r\n                    position_y = 0\r\n                if len(par.total_position_x) != 0:\r\n                    position_x = len(par.total_position_x)\r\n                else:\r\n                    position_x = 0\r\n                total_turn = position_y + position_x\r\n                print(total_turn)\r\n                # 移除下料孔\r\n                tT.pastebody(total_turn, par.plate_hole_type[0])\r\n                tT.removebody(total_turn, par.plate_hole_type[0])\r\n                mprog.Update()\r\n                tT.switch_to_window_by_name(par.plate_hole_type[0] + \".CATPart\")\r\n                mprog.close_window()\r\n        if len(par.plate_normal_name) != 0:\r\n            if '無孔' not in par.plate_normal_name[0]:\r\n                # 開下料孔檔案+變數變換\r\n                if '圓孔' in par.plate_normal_name[0]:\r\n                    mprog.import_part(fp.system_root + fp.DEMO_part, 'cutout_hole_circle')\r\n                    mprog.param_change('cutout_hole_circle', par.cutout_parameter_circle[0],\r\n                                       int(par.cutout_part_dimension[0]))\r\n                    mprog.param_change('cutout_hole_circle', 'C', par.plate_all_parameter['C'])\r\n                    mprog.param_change('cutout_hole_circle', 'X',\r\n                                       par.cutout_hole_machining_X - par.plate_all_parameter['A'] / 2 - par.lv[\r\n                                           0] / 2)\r\n                    mprog.param_change('cutout_hole_circle', 'Y',\r\n                                       par.plate_all_parameter['B'] / 2 + par.cutout_hole_machining_Y)\r\n                    par.plate_normal_name[0] = 'cutout_hole_circle'\r\n                elif '方孔' in par.plate_normal_name[0]:\r\n                    mprog.import_part(fp.system_root + fp.DEMO_part, 'cutout_hole_square')\r\n                    for n in range(0, 2):\r\n                        mprog.param_change('cutout_hole_square', par.cutout_parameter_square[n],\r\n                                           int(par.cutout_part_dimension[n]))\r\n                    mprog.param_change('cutout_hole_square', 'C', par.plate_all_parameter['C'])\r\n                    mprog.param_change('cutout_hole_square', 'X',\r\n                                       par.cutout_hole_machining_X - par.plate_all_parameter['A'] / 2 - par.lv[\r\n                                           0] / 2)\r\n                    mprog.param_change('cutout_hole_square', 'Y',\r\n                                       par.plate_all_parameter['B'] / 2 + par.cutout_hole_machining_Y)\r\n                    mprog.param_change('cutout_hole_square', 'edge_fillet', par.cutout_spuare_R[0])\r\n                    par.plate_normal_name[0] = 'cutout_hole_square'\r\n                elif '漏斗型' in par.plate_normal_name[0]:\r\n                    mprog.import_part(fp.system_root + fp.DEMO_part, 'cutout_funnel')\r\n                    for n in range(0, 5):\r\n                        mprog.param_change('cutout_funnel', par.cutout_parameter_funnel[n],\r\n                                           int(par.cutout_part_dimension[n]))\r\n                    mprog.param_change('cutout_funnel', 'C', par.plate_all_parameter['C'])\r\n                    mprog.param_change('cutout_funnel', 'X',\r\n                                       par.cutout_hole_machining_X - par.plate_all_parameter['A'] / 2 - par.lv[\r\n                                           0] / 2)\r\n                    mprog.param_change('cutout_funnel', 'Y',\r\n                                       par.plate_all_parameter['B'] / 2 + par.cutout_hole_machining_Y)\r\n                    par.plate_normal_name[0] = 'cutout_funnel'\r\n                elif '模墊型' in par.plate_normal_name[0]:\r\n                    mprog.import_part(fp.system_root + fp.DEMO_part, 'cutout_molded_cushion')\r\n                    mprog.param_change('cutout_molded_cushion', 'C', par.plate_all_parameter['C'])\r\n                    if stamping_press_type < 5:\r\n                        mprog.param_change('cutout_molded_cushion', 'A', par.cutout_molded_cushion_A[0])\r\n                        mprog.param_change('cutout_molded_cushion', 'B', par.cutout_molded_cushion_B[0])\r\n                        mprog.param_change('cutout_molded_cushion', 'D', par.cutout_molded_cushion_L[0])\r\n                    else:\r\n                        mprog.param_change('cutout_molded_cushion', 'A', par.cutout_molded_cushion_A[1])\r\n                        mprog.param_change('cutout_molded_cushion', 'B', par.cutout_molded_cushion_B[1])\r\n                        mprog.param_change('cutout_molded_cushion', 'D', par.cutout_molded_cushion_L[1])\r\n                    mprog.param_change('cutout_molded_cushion', 'i',\r\n                                       par.normal_cutout_molded_cushion_length_quantity[stamping_press_type])\r\n                    mprog.param_change('cutout_molded_cushion', 'j',\r\n                                       par.normal_cutout_molded_cushion_width_quantity[stamping_press_type])\r\n                    mprog.param_change('cutout_molded_cushion', 'width_gap', par.normal_cutout_molded_cushion_length_gap[stamping_press_type])\r\n                    mprog.param_change('cutout_molded_cushion', 'length_gap', par.normal_cutout_molded_cushion_width_gap[stamping_press_type])\r\n                    mprog.param_change('cutout_molded_cushion', 'X', -((par.plate_all_parameter['A'] + par.lv[0]) / 2 - (par.normal_cutout_molded_cushion_length_quantity[stamping_press_type] - 1) * par.normal_cutout_molded_cushion_width_gap[stamping_press_type] / 2))\r\n                    print((par.plate_all_parameter['A'] + par.lv[0]) / 2 - (par.normal_cutout_molded_cushion_length_quantity[stamping_press_type] - 1) * par.normal_cutout_molded_cushion_width_gap[stamping_press_type] / 2)\r\n\r\n                    mprog.param_change('cutout_molded_cushion', 'Y',\r\n                                       (par.plate_all_parameter['B'] / 2 -\r\n                                       (par.normal_cutout_molded_cushion_length_gap[stamping_press_type] *\r\n                                        (par.normal_cutout_molded_cushion_width_quantity[stamping_press_type] - 1)) / 2))\r\n                    par.plate_normal_name[0] = 'cutout_molded_cushion'\r\n\r\n                mprog.Update()\r\n                mprog.save_file_stp(path, par.plate_normal_name[0])\r\n                mprog.save_stpfile_part(path, par.plate_normal_name[0])\r\n                tT.copybody()\r\n                tT.switch_to_window_by_name('plate.CATPart')\r\n                # 計算下料孔變數名稱\r\n                if len(par.total_position_y) != 0:\r\n                    position_y = len(par.total_position_y)\r\n                else:\r\n                    position_y = 0\r\n                if len(par.total_position_x) != 0:\r\n                    position_x = len(par.total_position_x)\r\n                else:\r\n                    position_x = 0\r\n                total_turn = position_y + position_x\r\n                print(total_turn)\r\n                # 移除下料孔\r\n                tT.pastebody(total_turn, par.plate_normal_name[0])\r\n                tT.removebody(total_turn, par.plate_normal_name[0])\r\n                mprog.Update()\r\n                tT.switch_to_window_by_name(par.plate_normal_name[0] + \".CATPart\")\r\n                mprog.close_window()\r\n\r\n\r\n# T溝外型尺寸\r\n# class pad_dimension(QtWidgets.QWidget):\r\n#     def __init__(self, stamping_press_type):\r\n#         super().__init__()\r\n#         self.ui = pad_dimension_Form()\r\n#         self.ui.setupUi(self)\r\n#         self.setWindowTitle('平板')\r\n#         self.ui.setup_value.clicked.connect(lambda :self.setup(stamping_press_type))\r\n#         self.ui.escape.clicked.connect(lambda :self.show_pad_secend_windows(stamping_press_type))\r\n#         self.ui.reset_value.clicked.connect(self.reset)\r\n#\r\n#     def setup(self, stamping_press_type):\r\n#         t_a = str(self.ui.A.text())\r\n#         t_b = str(self.ui.B.text())\r\n#         t_c = str(self.ui.C.text())\r\n#         t_d = str(self.ui.D.text())\r\n#         par.t_all_dimension = [t_a, t_b, t_c, t_d]\r\n#         print(\"T溝外型尺寸:\", par.t_all_dimension)\r\n#         self.hide()\r\n#         self.nw = pad_secend_windows(stamping_press_type)\r\n#         self.nw.show()\r\n#\r\n#     def reset(self):\r\n#         self.ui.A.clear()\r\n#         self.ui.B.clear()\r\n#         self.ui.C.clear()\r\n#         self.ui.D.clear()\r\n#\r\n#     def show_pad_secend_windows(self, stamping_press_type):\r\n#         self.hide()\r\n#         self.nw = pad_secend_windows(stamping_press_type)\r\n#         self.nw.show()\r\n\r\n\r\nclass t_machining(QWidget):\r\n    def __init__(self, stamping_press_type, plate_lenght, plate_width):\r\n        super().__init__()\r\n        self.ui = pad_machining_Form()\r\n        self.ui.setupUi(self)\r\n        self.setWindowTitle('平板加工設定')\r\n        # 橫向T溝\r\n        self.ui.t_slot_table_h.verticalHeader().setVisible(False)\r\n        self.ui.t_slot_table_h.horizontalHeader().setVisible(False)\r\n        self.ui.t_slot_table_h.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)\r\n        self.ui.t_slot_table_h.setEditTriggers(QAbstractItemView.AllEditTriggers)\r\n        self.t_slot_table_h_setup()\r\n        self.ui.t_slot_h_number.textChanged.connect(self.check_slot_number)\r\n        self.table_h_combo_boxes = {}\r\n        # 縱向T溝\r\n        self.ui.t_slot_table_v.verticalHeader().setVisible(False)\r\n        self.ui.t_slot_table_v.horizontalHeader().setVisible(False)\r\n        self.ui.t_slot_table_v.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)\r\n        self.ui.t_slot_table_v.setEditTriggers(QAbstractItemView.AllEditTriggers)\r\n        self.t_slot_table_v_setup()\r\n        self.ui.t_slot_v_number.textChanged.connect(self.check_slot_v_number)\r\n        self.table_v_combo_boxes = {}\r\n        # 確定按鈕\r\n        self.ui.setup.clicked.connect(lambda: self.setup(stamping_press_type))\r\n        # 重製按鈕\r\n        self.ui.reset.clicked.connect(self.reset)\r\n        # 重新排列\r\n        self.ui.rearrange_the_order.clicked.connect(lambda: self.rearrange_the_order(plate_lenght, plate_width))\r\n\r\n    def change_table_h_clear_table(self):\r\n        while self.ui.t_slot_table_h.rowCount() > 1:\r\n            self.ui.t_slot_table_h.removeRow(1)\r\n\r\n    def check_slot_number(self, current_value):\r\n        try:\r\n            if current_value == '':\r\n                current_value = 0\r\n            current_value = int(current_value)\r\n            self.add_rows_to_table(current_value)  # 插入新行\r\n        except ValueError:\r\n            print(\"Invalid input. Please enter a valid number\")\r\n\r\n    def add_rows_to_table(self, num_rows):\r\n        self.change_table_h_clear_table()  # 清除表格内容\r\n        col_count = self.ui.t_slot_table_h.columnCount()\r\n        for row in range(num_rows):\r\n            row_position = self.ui.t_slot_table_h.rowCount()\r\n            self.ui.t_slot_table_h.insertRow(row_position)\r\n            for col in range(col_count):\r\n                item = QTableWidgetItem(\"H\" + str(row_position) if (row_position == 0 or col == 0) else \"\")\r\n                if col == 0 or row_position == 0:\r\n                    item.setFlags(item.flags() & ~Qt.ItemIsEditable)\r\n                else:\r\n                    # 其他单元格默认不可编辑，会在后续根据条件进行修改\r\n                    item.setFlags(item.flags() | Qt.ItemIsEditable)\r\n                self.ui.t_slot_table_h.setItem(row_position, col, item)\r\n            # 创建 QComboBox 并添加到新行的第三列\r\n            combo_box = QComboBox()\r\n            combo_box.addItem(\"\")\r\n            combo_box.addItem(\"貫穿\")\r\n            combo_box.addItem(\"分段\")\r\n            combo_box.currentIndexChanged.connect(lambda index, row=row_position: self.combo_box_changed(row, index))\r\n            self.ui.t_slot_table_h.setCellWidget(row_position, 2, combo_box)\r\n            self.table_h_combo_boxes[row_position] = combo_box  # 存储QComboBox\r\n            # 初始化选项状态为不可编辑\r\n            for col in range(3, 5):\r\n                item = QTableWidgetItem(\"\")\r\n                item.setFlags(item.flags() & ~Qt.ItemIsEditable)\r\n                color = QColor(192, 192, 192)\r\n                brush = QBrush(color)\r\n                item.setBackground(brush)\r\n                self.ui.t_slot_table_h.setItem(row_position, col, item)\r\n\r\n    def combo_box_changed(self, row, index):\r\n        combo_box = self.table_h_combo_boxes.get(row)\r\n        if combo_box:\r\n            if index == 2:  # 如果选择了\"分段\"\r\n                self.set_editable_cells(row, is_editable=True)\r\n            else:\r\n                self.set_editable_cells(row, is_editable=False)\r\n\r\n    def set_editable_cells(self, row, is_editable=True):\r\n        for col in range(3, 5):\r\n            item = self.ui.t_slot_table_h.item(row, col)\r\n            if item:\r\n                if is_editable and row != 0:\r\n                    item.setFlags(item.flags() | Qt.ItemIsEditable)\r\n                    item.setBackground(QBrush(QColor(255, 255, 255)))\r\n                else:\r\n                    item.setFlags(item.flags() & ~Qt.ItemIsEditable)\r\n                    item.setBackground(QBrush(QColor(192, 192, 192)))\r\n\r\n    def t_slot_table_h_setup(self):\r\n        # 第一行\r\n        for col in range(7):  # 假设有7列\r\n            newItem = QTableWidgetItem(\r\n                \"編號\" if col == 0 else \"位置(Y)\" if col == 1 else \"形式\" if col == 2 else \"LL\" if col == 3 else \"LR\" if col == 4 else \"SL\" if col == 5 else \"SR\")\r\n            newItem.setTextAlignment(Qt.AlignCenter)  # 可以根据需要设置文本对齐方式\r\n            self.ui.t_slot_table_h.setItem(0, col, newItem)\r\n            newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable)  # 移除可编辑标志\r\n\r\n    def combo_box_changed_v(self, row, index):\r\n        combo_box = self.table_v_combo_boxes.get(row)\r\n        if combo_box:\r\n            if index == 2:\r\n                self.set_editable_v_cells(row, is_editable=True)\r\n            else:\r\n                self.set_editable_v_cells(row, is_editable=False)\r\n\r\n    def change_table_v_clear_table(self):\r\n        while self.ui.t_slot_table_v.rowCount() > 1:\r\n            self.ui.t_slot_table_v.removeRow(1)\r\n\r\n    def check_slot_v_number(self, current_value):\r\n        try:\r\n            if current_value == '':\r\n                current_value = 0\r\n            current_value = int(current_value)\r\n            self.add_rows_to_table_v(current_value)\r\n        except ValueError:\r\n            print(\"Invalid input. Please enter a valid number\")\r\n\r\n    def add_rows_to_table_v(self, num_rows):\r\n        self.change_table_v_clear_table()\r\n        col_count = self.ui.t_slot_table_v.columnCount()\r\n        for row in range(num_rows):\r\n            row_position = self.ui.t_slot_table_v.rowCount()\r\n            self.ui.t_slot_table_v.insertRow(row_position)\r\n            for col in range(col_count):\r\n                item = QTableWidgetItem(\"V\" + str(row_position) if (row_position == 0 or col == 0) else \"\")\r\n                if col == 0 or row_position == 0:\r\n                    item.setFlags(item.flags() & ~Qt.ItemIsEditable)\r\n                else:\r\n                    item.setFlags(item.flags() | Qt.ItemIsEditable)\r\n                self.ui.t_slot_table_v.setItem(row_position, col, item)\r\n\r\n            # 创建 QComboBox 并添加到新行的第三列\r\n            combo_box = QComboBox()\r\n            combo_box.addItem(\"\")\r\n            combo_box.addItem(\"貫穿\")\r\n            combo_box.addItem(\"分段\")\r\n            combo_box.currentIndexChanged.connect(lambda index, row=row_position: self.combo_box_changed_v(row, index))\r\n            self.ui.t_slot_table_v.setCellWidget(row_position, 2, combo_box)\r\n            self.table_v_combo_boxes[row_position] = combo_box  # 存储QComboBox\r\n            # 初始化选项状态为不可编辑\r\n            for col in range(3, 5):\r\n                item = QTableWidgetItem(\"\")\r\n                item.setFlags(item.flags() & ~Qt.ItemIsEditable)\r\n                color = QColor(192, 192, 192)\r\n                brush = QBrush(color)\r\n                item.setBackground(brush)\r\n                self.ui.t_slot_table_v.setItem(row_position, col, item)\r\n\r\n    def set_editable_v_cells(self, row, is_editable=True):\r\n        for col in range(3, 5):\r\n            item = self.ui.t_slot_table_v.item(row, col)\r\n            if item:\r\n                if is_editable and row != 0:\r\n                    item.setFlags(item.flags() | Qt.ItemIsEditable)\r\n                    item.setBackground(QBrush(QColor(255, 255, 255)))\r\n                else:\r\n                    item.setFlags(item.flags() & ~Qt.ItemIsEditable)\r\n                    item.setBackground(QBrush(QColor(192, 192, 192)))\r\n\r\n    def t_slot_table_v_setup(self):\r\n        # 第一行\r\n        for col in range(7):  # 假設有7列\r\n            newItem = QTableWidgetItem(\r\n                \"編號\" if col == 0 else \"位置(X)\" if col == 1 else \"形式\" if col == 2 else \"LF\" if col == 3 else \"LB\" if col == 4 else \"SF\" if col == 5 else \"SB\")\r\n            newItem.setTextAlignment(Qt.AlignCenter)  # 可以根據需要設定文本對齊方式\r\n            self.ui.t_slot_table_v.setItem(0, col, newItem)\r\n            newItem.setFlags(newItem.flags() & ~Qt.ItemIsEditable)  # 移除可編輯標誌\r\n\r\n    def setup(self, stamping_press_type):\r\n        self.hide()\r\n        self.nw = pad_secend_windows(stamping_press_type)\r\n        self.nw.show()\r\n\r\n    def rearrange_the_order(self, plate_lenght, plate_width):\r\n        par.total_position_y.clear()\r\n        par.total_t_slot_h_type.clear()\r\n        par.total_LL.clear()\r\n        par.total_LR.clear()\r\n        par.total_SL.clear()\r\n        par.total_SR.clear()\r\n        par.total_position_x.clear()\r\n        par.total_t_slot_v_type.clear()\r\n        par.total_LF.clear()\r\n        par.total_LB.clear()\r\n        par.total_SF.clear()\r\n        par.total_SB.clear()\r\n\r\n        if self.ui.t_slot_table_h.rowCount() != 0:\r\n            for row in range(1, self.ui.t_slot_table_h.rowCount()):\r\n                position_y = self.ui.t_slot_table_h.item(row, 1).text()\r\n                t_slot_type = self.ui.t_slot_table_h.cellWidget(row, 2).currentText()\r\n                LL = self.ui.t_slot_table_h.item(row, 3).text()\r\n                LR = self.ui.t_slot_table_h.item(row, 4).text()\r\n                SL = self.ui.t_slot_table_h.item(row, 5).text()\r\n                SR = self.ui.t_slot_table_h.item(row, 6).text()\r\n                par.total_position_y.append(position_y)\r\n                par.total_t_slot_h_type.append(t_slot_type)\r\n                par.total_LL.append(LL)\r\n                par.total_LR.append(LR)\r\n                par.total_SL.append(SL)\r\n                par.total_SR.append(SR)\r\n            par.total_position_y = [int(x) for x in par.total_position_y]\r\n            position_y_change_position = sorted(enumerate(par.total_position_y), key=lambda x: x[1], reverse=True)\r\n            print('position_y_change_position:', position_y_change_position)\r\n            rearrange = [position[0] for position in position_y_change_position]\r\n            print('rearrange:', rearrange)\r\n            par.total_position_y = [par.total_position_y[order_position] for order_position in rearrange]\r\n            par.total_LL = [par.total_LL[order_position] for order_position in rearrange]\r\n            par.total_LR = [par.total_LR[order_position] for order_position in rearrange]\r\n            par.total_SL = [par.total_SL[order_position] for order_position in rearrange]\r\n            par.total_SR = [par.total_SR[order_position] for order_position in rearrange]\r\n            par.total_t_slot_h_type = [par.total_t_slot_h_type[order_position] for order_position in rearrange]\r\n\r\n            print('total_position_y:', par.total_position_y)\r\n            print('total_t_slot_h_type:', par.total_t_slot_h_type)\r\n            print('total_LL:', par.total_LL)\r\n            print('total_LR:', par.total_LR)\r\n            print('total_SL:', par.total_SL)\r\n            print('total_SR:', par.total_SR)\r\n            for position, item in enumerate(par.total_position_y):\r\n                # 將整數轉換為字串，然後設定為表格的項目文本\r\n                item_text = str(item)\r\n                table_item = QtWidgets.QTableWidgetItem(item_text)\r\n                self.ui.t_slot_table_h.setItem(position + 1, 1, table_item)\r\n            for position, item in enumerate(par.total_LL):\r\n                item = QtWidgets.QTableWidgetItem(item)\r\n                self.ui.t_slot_table_h.setItem(position + 1, 3, item)\r\n            for position, item in enumerate(par.total_LR):\r\n                item = QtWidgets.QTableWidgetItem(item)\r\n                self.ui.t_slot_table_h.setItem(position + 1, 4, item)\r\n            for position, item in enumerate(par.total_SL):\r\n                item = QtWidgets.QTableWidgetItem(item)\r\n                self.ui.t_slot_table_h.setItem(position + 1, 5, item)\r\n            for position, item in enumerate(par.total_SR):\r\n                item = QtWidgets.QTableWidgetItem(item)\r\n                self.ui.t_slot_table_h.setItem(position + 1, 6, item)\r\n            for position, item in enumerate(par.total_t_slot_h_type):\r\n                combo_box = self.ui.t_slot_table_h.cellWidget(position + 1, 2)  # 從表格中獲取 ComboBox\r\n                combo_box.setCurrentText(item)\r\n                self.combo_box_changed(position + 1, combo_box.currentIndex())\r\n\r\n        if self.ui.t_slot_table_v.rowCount() != 0:\r\n            for row in range(1, self.ui.t_slot_table_v.rowCount()):\r\n                position_x = self.ui.t_slot_table_v.item(row, 1).text()\r\n                t_slot_type = self.ui.t_slot_table_v.cellWidget(row, 2).currentText()\r\n                LF = self.ui.t_slot_table_v.item(row, 3).text()\r\n                LB = self.ui.t_slot_table_v.item(row, 4).text()\r\n                SF = self.ui.t_slot_table_v.item(row, 5).text()\r\n                SB = self.ui.t_slot_table_v.item(row, 6).text()\r\n                par.total_position_x.append(position_x)\r\n                par.total_t_slot_v_type.append(t_slot_type)\r\n                par.total_LF.append(LF)\r\n                par.total_LB.append(LB)\r\n                par.total_SF.append(SF)\r\n                par.total_SB.append(SB)\r\n            par.total_position_x = [int(x) for x in par.total_position_x]\r\n            position_x_change_position = sorted(enumerate(par.total_position_x), key=lambda x: x[1], reverse=True)\r\n            print('position_x_change_position:', position_x_change_position)\r\n            rearrange = [position[0] for position in position_x_change_position]\r\n            print('rearrange:', rearrange)\r\n            par.total_position_x = [par.total_position_x[order_position] for order_position in rearrange]\r\n            par.total_LF = [par.total_LF[order_position] for order_position in rearrange]\r\n            par.total_LB = [par.total_LB[order_position] for order_position in rearrange]\r\n            par.total_SF = [par.total_SF[order_position] for order_position in rearrange]\r\n            par.total_SB = [par.total_SB[order_position] for order_position in rearrange]\r\n            par.total_t_slot_v_type = [par.total_t_slot_v_type[order_position] for order_position in rearrange]\r\n            print('total_position_x:', par.total_position_x)\r\n            print('total_t_slot_v_type:', par.total_t_slot_v_type)\r\n            print('total_LF:', par.total_LF)\r\n            print('total_LB:', par.total_LB)\r\n            print('total_SF:', par.total_SF)\r\n            print('total_SB:', par.total_SB)\r\n            for position, item in enumerate(par.total_position_x):\r\n                # 將整數轉換為字串，然後設定為表格的項目文本\r\n                item_text = str(item)\r\n                table_item = QtWidgets.QTableWidgetItem(item_text)\r\n                self.ui.t_slot_table_v.setItem(position + 1, 1, table_item)\r\n            for position, item in enumerate(par.total_LF):\r\n                item = QtWidgets.QTableWidgetItem(item)\r\n                self.ui.t_slot_table_v.setItem(position + 1, 3, item)\r\n            for position, item in enumerate(par.total_LB):\r\n                item = QtWidgets.QTableWidgetItem(item)\r\n                self.ui.t_slot_table_v.setItem(position + 1, 4, item)\r\n            for position, item in enumerate(par.total_SF):\r\n                item = QtWidgets.QTableWidgetItem(item)\r\n                self.ui.t_slot_table_v.setItem(position + 1, 5, item)\r\n            for position, item in enumerate(par.total_SB):\r\n                item = QtWidgets.QTableWidgetItem(item)\r\n                self.ui.t_slot_table_v.setItem(position + 1, 6, item)\r\n            for position, item in enumerate(par.total_t_slot_v_type):\r\n                combo_box = self.ui.t_slot_table_v.cellWidget(position + 1, 2)\r\n                combo_box.setCurrentText(item)\r\n                self.combo_box_changed_v(position + 1, combo_box.currentIndex())\r\n\r\n            # 檢查T溝是否超出界線\r\n            # T溝尺寸與平板邊緣>=50mm\r\n            if len(par.total_position_y) != 0:\r\n                if par.total_position_y[0] + (par.t_all_dimension[1] / 2) > (plate_width / 2) - 50:\r\n                    self.show_alert('橫向T溝位置(Y) H1 與平板邊緣過近')\r\n                if par.total_position_y[-1] - (par.t_all_dimension[1] / 2) <= (-plate_width / 2) + 50:\r\n                    self.show_alert('橫向T溝位置(Y) H' + str(len(par.total_position_y)) + ' 與平板邊緣過近')\r\n\r\n                # T溝與T溝之間間距需>=50mm\r\n                for turn in range(len(par.total_position_y) - 1):\r\n                    third_value = abs(par.total_position_y[turn] - par.total_position_y[turn + 1]) - \\\r\n                                  par.t_all_dimension[1]\r\n                    if third_value <= 50:\r\n                        self.show_alert('橫向T溝位置(Y) H' + str(turn + 1) + ' 與 H' + str(turn + 2) + ' 間距過近')\r\n                    print('third_value:', third_value)\r\n\r\n            if len(par.total_position_x) != 0:\r\n                if par.total_position_x[0] + (par.t_all_dimension[0] / 2) > (plate_lenght / 2) - 50:\r\n                    self.show_alert('縱向T溝位置(X) V1 與平板邊緣過近')\r\n                if par.total_position_x[-1] - (par.t_all_dimension[0] / 2) <= (-plate_lenght / 2) + 50:\r\n                    self.show_alert('縱向T溝位置(X) V' + str(len(par.total_position_x)) + ' 與平板邊緣過近')\r\n\r\n                # T溝與T溝之間間距需>=50mm\r\n                for turn in range(len(par.total_position_x) - 1):\r\n                    third_value = abs(par.total_position_x[turn] - par.total_position_x[turn + 1]) - \\\r\n                                  par.t_all_dimension[0]\r\n                    if third_value <= 50:\r\n                        self.show_alert('縱向T溝位置(X) V' + str(turn + 1) + ' 與 V' + str(turn + 2) + ' 間距過近')\r\n                    print('third_value:', third_value)\r\n\r\n    def show_alert(self, alert):\r\n        QMessageBox.about(self, \"警告\", alert)\r\n\r\n    def reset(self):\r\n        self.ui.t_slot_h_number.clear()\r\n        self.ui.t_slot_v_number.clear()\r\n        par.total_position_y.clear()\r\n        par.total_t_slot_h_type.clear()\r\n        par.total_LL.clear()\r\n        par.total_LR.clear()\r\n        par.total_SL.clear()\r\n        par.total_SR.clear()\r\n        par.total_position_x.clear()\r\n        par.total_t_slot_v_type.clear()\r\n        par.total_LF.clear()\r\n        par.total_LB.clear()\r\n        par.total_SF.clear()\r\n        par.total_SB.clear()\r\n\r\n\r\n# 下料孔設定介面\r\nclass cutout_hole_machining(QtWidgets.QWidget):\r\n    def __init__(self, stamping_press_type):\r\n        super().__init__()\r\n        self.ui = cutout_hole_machining_form()\r\n        self.ui.setupUi(self)\r\n        self.setWindowTitle('下料口位置')\r\n        if par.plate_hole_type[0] != '無孔':\r\n            if par.plate_hole_type[0] == '圓孔':\r\n                self.ui.picture.setPixmap(QtGui.QPixmap(\"feeding_hole_A.png\"))\r\n            elif par.plate_hole_type[0] == '方孔':\r\n                self.ui.picture.setPixmap(QtGui.QPixmap(\"feeding_hole_B.png\"))\r\n            elif par.plate_hole_type[0] == '漏斗型':\r\n                self.ui.picture.setPixmap(QtGui.QPixmap(\"feeding_hole_C.png\"))\r\n        self.ui.setup.clicked.connect(lambda: self.setup(stamping_press_type))\r\n        self.ui.esc.clicked.connect(lambda: self.esc(stamping_press_type))\r\n\r\n    def setup(self, stamping_press_type):\r\n        par.cutout_hole_machining_X = self.ui.X.text()\r\n        par.cutout_hole_machining_Y = self.ui.Y.text()\r\n        if par.cutout_hole_machining_X == '':\r\n            par.cutout_hole_machining_X = 0\r\n        if par.cutout_hole_machining_Y == '':\r\n            par.cutout_hole_machining_Y = 0\r\n        par.cutout_hole_machining_X = int(par.cutout_hole_machining_X)\r\n        par.cutout_hole_machining_Y = int(par.cutout_hole_machining_Y)\r\n\r\n        excel_cutout_limit = epc.ExcelOp('平板', '下料孔界線')\r\n        excel_cutout_limit.get_cutout_limit(stamping_press_type)\r\n        print(par.cutout_hole_machining_X, par.cutout_hole_machining_Y, par.cutout_all_limit['X'],\r\n              par.cutout_all_limit['Y'])\r\n        if par.plate_hole_type[0] == '圓孔':\r\n            if abs(par.cutout_hole_machining_X) + int(par.cutout_part_dimension[0]) / 2 + 10 >= par.cutout_all_limit[\r\n                'X'] / 2 or abs(par.cutout_hole_machining_Y) + int(par.cutout_part_dimension[0]) / 2 + 10 >= \\\r\n                    par.cutout_all_limit['Y'] / 2:\r\n                print('error')\r\n            else:\r\n                self.esc(stamping_press_type)\r\n        elif par.plate_hole_type[0] == '方孔':\r\n            if abs(par.cutout_hole_machining_X) + int(par.cutout_part_dimension[0]) / 2 + 10 >= par.cutout_all_limit[\r\n                'X'] / 2 or abs(par.cutout_hole_machining_Y) + int(par.cutout_part_dimension[0]) / 2 + 10 >= \\\r\n                    par.cutout_all_limit['Y'] / 2:\r\n                print('error')\r\n            else:\r\n                self.esc(stamping_press_type)\r\n        elif par.plate_hole_type[0] == '漏斗型':\r\n            if abs(par.cutout_hole_machining_X) + int(par.cutout_part_dimension[0]) / 2 + 10 >= par.cutout_all_limit[\r\n                'X'] / 2 or abs(par.cutout_hole_machining_Y) + int(par.cutout_part_dimension[0]) / 2 + 10 >= \\\r\n                    par.cutout_all_limit['Y'] / 2:\r\n                print('error')\r\n            else:\r\n                self.esc(stamping_press_type)\r\n        else:\r\n            self.esc(stamping_press_type)\r\n\r\n    def esc(self, stamping_press_type):\r\n        self.hide()\r\n        self.nw = pad_secend_windows(stamping_press_type)\r\n        self.nw.show()\r\n\r\n\r\n# class remove_machining(QtWidgets.QWidget):\r\n#     def __init__(self, stamping_press_type):\r\n#         super().__init__()\r\n#         self.ui = pad_feeding_hole_Form()\r\n#         self.ui.setupUi(self)\r\n#         self.setWindowTitle('下料口加工設定')\r\n#         self.ui.escape.clicked.connect(self.show_pad_secend_windows)\r\n#         self.ui.setup.clicked.connect(lambda :self.setup(stamping_press_type))\r\n#         self.ui.reset.clicked.connect(self.clean_data)\r\n#\r\n#     def setup(self, stamping_press_type):\r\n#         X = self.ui.X.text()\r\n#         Y = self.ui.Y.text()\r\n#         par.feeding_hole_position = [X, Y]\r\n#         print(\"下料口位置:\", par.feeding_hole_position)\r\n#         self.hide()\r\n#         self.nw = pad_secend_windows(stamping_press_type)\r\n#         self.nw.show()\r\n#\r\n#     def clean_data(self):\r\n#         self.ui.X.clear()\r\n#         self.ui.Y.clear()\r\n#\r\n#     def show_pad_secend_windows(self, stamping_press_type):\r\n#         self.hide()\r\n#         self.nw = pad_secend_windows(stamping_press_type)\r\n#         self.nw.show()\r\n\r\n\r\nclass FolderManager:\r\n    _instance = None\r\n\r\n    def __new__(cls, create_name):\r\n        if cls._instance is None:\r\n            cls._instance = super(FolderManager, cls).__new__(cls)\r\n            cls._instance.init_folders(create_name)\r\n        return cls._instance\r\n\r\n    def init_folders(self, create_name):\r\n        time_now = datetime.datetime.now()\r\n        dir_name = '{}_{}_{}_{}_{}'.format(create_name, time_now.day, time_now.hour, time_now.minute, time_now.second)\r\n        desktop = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')\r\n        path = desktop + '\\\\' + dir_name\r\n        os.mkdir(path)\r\n        self.path = path\r\n\r\n    # 添加其他管理資料夾的方法，如machining、welding等\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)  # 自適應屏幕分辨率\r\n    app = QtWidgets.QApplication([])\r\n    window = main()\r\n    window.show()\r\n    sys.exit(app.exec_())\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SYEI_stamping_press_system/DEMO.py b/SYEI_stamping_press_system/DEMO.py
--- a/SYEI_stamping_press_system/DEMO.py	(revision ad4b10c49ffb455c1b8936742317bee1e8e94acb)
+++ b/SYEI_stamping_press_system/DEMO.py	(date 1699363997485)
@@ -1,7 +1,7 @@
 from PyQt5 import QtCore, QtGui, QtWidgets
-from PyQt5.QtWidgets import QVBoxLayout, QWidget, QPushButton, QLabel, QTableWidgetItem, QHeaderView, QComboBox, QAbstractItemView, QMessageBox, QHBoxLayout
+from PyQt5.QtWidgets import QVBoxLayout, QWidget, QPushButton, QLabel, QTableWidgetItem, QHeaderView, QComboBox, QAbstractItemView, QMessageBox, QHBoxLayout, QLineEdit
 from PyQt5.QtCore import Qt
-from PyQt5.QtGui import QColor, QBrush, QPixmap
+from PyQt5.QtGui import QColor, QBrush, QPixmap, QFont
 from DEMOGUI import Ui_Dialog
 from PAD_main import Ui_Form as pad_main_Form
 from PAD_MACHINING import Ui_Form as pad_machining_Form
@@ -39,6 +39,7 @@
         self.ui.setupUi(self)
         self.setting()
         self.ui.start.clicked.connect(self.start)
+        self.previous_value()
 
     def setting(self):
         # 设置额外的宽度和高度来容纳其他界面元素
@@ -254,38 +255,38 @@
         spare_parts_finish = QtWidgets.QLabel('未設定')
         spare_parts_finish.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
         self.ui.window_main_table.setCellWidget(23, 4, spare_parts_finish)
-        punch_stroke_customize = QTableWidgetItem('')
-        punch_stroke_customize.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
-        # punch_stroke_customize.setBackground(QBrush(QColor(255, 191, 0)))  # 背景色
-        self.ui.window_main_table.setItem(9, 4, punch_stroke_customize)
-        punch_cycle_customize = QTableWidgetItem('')
-        punch_cycle_customize.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
-        # punch_cycle_customize.setBackground(QBrush(QColor(255, 191, 0)))
-        self.ui.window_main_table.setItem(10, 4, punch_cycle_customize)
-        punch_DH_customize = QTableWidgetItem('')
-        punch_DH_customize.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
-        # punch_DH_customize.setBackground(QBrush(QColor(255, 191, 0)))
-        self.ui.window_main_table.setItem(11, 4, punch_DH_customize)
-        motor_company_customize = QTableWidgetItem('')
-        motor_company_customize.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
-        # motor_company_customize.setBackground(QBrush(QColor(255, 191, 0)))
-        self.ui.window_main_table.setItem(12, 4, motor_company_customize)
-        motor_power_customize = QTableWidgetItem('')
-        motor_power_customize.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
-        # motor_power_customize.setBackground(QBrush(QColor(255, 191, 0)))
-        self.ui.window_main_table.setItem(13, 4, motor_power_customize)
-        frequency_company_customize = QTableWidgetItem('')
-        frequency_company_customize.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
-        # frequency_company_customize.setBackground(QBrush(QColor(255, 191, 0)))
-        self.ui.window_main_table.setItem(14, 4, frequency_company_customize)
-        frequency_power_customize = QTableWidgetItem('')
-        frequency_power_customize.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
-        # frequency_power_customize.setBackground(QBrush(QColor(255, 191, 0)))
-        self.ui.window_main_table.setItem(15, 4, frequency_power_customize)
-        upper_kg_customize = QTableWidgetItem('')
-        upper_kg_customize.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
-        # upper_kg_customize.setBackground(QBrush(QColor(255, 191, 0)))
-        self.ui.window_main_table.setItem(16, 4, upper_kg_customize)
+        punch_stroke_customize = QLineEdit('')
+        punch_stroke_customize.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
+        punch_stroke_customize.setStyleSheet('background-color:#ffe4c4;') # 背景色
+        self.ui.window_main_table.setCellWidget(9, 4, punch_stroke_customize)
+        punch_cycle_customize = QLineEdit('')
+        punch_cycle_customize.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
+        punch_cycle_customize.setStyleSheet('background-color:#ffe4c4;')
+        self.ui.window_main_table.setCellWidget(10, 4, punch_cycle_customize)
+        punch_DH_customize = QLineEdit('')
+        punch_DH_customize.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
+        punch_DH_customize.setStyleSheet('background-color:#ffe4c4;')
+        self.ui.window_main_table.setCellWidget(11, 4, punch_DH_customize)
+        motor_company_customize = QLineEdit('')
+        motor_company_customize.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
+        motor_company_customize.setStyleSheet('background-color:#ffe4c4;')
+        self.ui.window_main_table.setCellWidget(12, 4, motor_company_customize)
+        motor_power_customize = QLineEdit('')
+        motor_power_customize.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
+        motor_power_customize.setStyleSheet('background-color:#ffe4c4;')
+        self.ui.window_main_table.setCellWidget(13, 4, motor_power_customize)
+        frequency_company_customize = QLineEdit('')
+        frequency_company_customize.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
+        frequency_company_customize.setStyleSheet('background-color:#ffe4c4;')
+        self.ui.window_main_table.setCellWidget(14, 4, frequency_company_customize)
+        frequency_power_customize = QLineEdit('')
+        frequency_power_customize.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
+        frequency_power_customize.setStyleSheet('background-color:#ffe4c4;')
+        self.ui.window_main_table.setCellWidget(15, 4, frequency_power_customize)
+        upper_kg_customize = QLineEdit('')
+        upper_kg_customize.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
+        upper_kg_customize.setStyleSheet('background-color:#ffe4c4;')
+        self.ui.window_main_table.setCellWidget(16, 4, upper_kg_customize)
 
         self.ui.window_main_table.setSpan(0, 5, 24, 9)
 
@@ -297,7 +298,7 @@
         pixmap = QPixmap('machine_picture.png')
         machine_picture.setPixmap(pixmap)
 
-        scaled_pixmap = pixmap.scaled(pixmap.width()-100,pixmap.height()-110)
+        scaled_pixmap = pixmap.scaled(pixmap.width()-100, pixmap.height()-110)
         machine_picture.setPixmap(scaled_pixmap)
 
         # # 设置 QLabel 居中
@@ -320,13 +321,57 @@
         self.ui.window_main_table.cellWidget(2, 3).currentIndexChanged.connect(lambda :self.unit_change())
         self.ui.window_main_table.cellWidget(4, 3).currentIndexChanged.connect(lambda :self.choose_stamping_press_type())
         self.ui.window_main_table.cellWidget(5, 3).currentIndexChanged.connect(lambda :self.choose_stamping_press_type())
-        # self.ui.window_main_table.item(9, 4).currentChanged.connect(lambda :self.customize_typing('stroke'))
+        self.ui.window_main_table.cellWidget(9, 4).textChanged.connect(lambda :self.customize_typing('stroke'))
+        self.ui.window_main_table.cellWidget(10, 4).textChanged.connect(lambda :self.customize_typing('cycle'))
+        self.ui.window_main_table.cellWidget(11, 4).textChanged.connect(lambda :self.customize_typing('DH'))
+
+
         plate_setup.clicked.connect(lambda:self.switch_to_plate(par.stamping_press_type))
         # punch_setup.clicked.connect()
         # select_setup.clicked.connect()
         # spare_parts_setup.clicked.connect()
 
+    def previous_value(self):
+        if par.main_change == '':
+            print('This is your first time enter main window')
+        elif par.main_change == '1':
+            if par.unit_keep == '公制':
+                self.ui.window_main_table.cellWidget(2, 3).setCurrentIndex(0)
+            elif par.unit_keep == '英制':
+                self.ui.window_main_table.cellWidget(2, 3).setCurrentIndex(1)
+            if par.type_keep == 'SN1-25':
+                self.ui.window_main_table.cellWidget(4, 3).setCurrentIndex(0)
+            elif par.type_keep == 'SN1-35':
+                self.ui.window_main_table.cellWidget(4, 3).setCurrentIndex(1)
+            elif par.type_keep == 'SN1-45':
+                self.ui.window_main_table.cellWidget(4, 3).setCurrentIndex(2)
+            elif par.type_keep == 'SN1-60':
+                self.ui.window_main_table.cellWidget(4, 3).setCurrentIndex(3)
+            elif par.type_keep == 'SN1-80':
+                self.ui.window_main_table.cellWidget(4, 3).setCurrentIndex(4)
+            elif par.type_keep == 'SN1-110':
+                self.ui.window_main_table.cellWidget(4, 3).setCurrentIndex(5)
+            elif par.type_keep == 'SN1-160':
+                self.ui.window_main_table.cellWidget(4, 3).setCurrentIndex(6)
+            elif par.type_keep == 'SN1-200':
+                self.ui.window_main_table.cellWidget(4, 3).setCurrentIndex(7)
+            elif par.type_keep == 'SN1-250':
+                self.ui.window_main_table.cellWidget(4, 3).setCurrentIndex(8)
+            if par.style_keep == 'S':
+                self.ui.window_main_table.cellWidget(5, 3).setCurrentIndex(0)
+            elif par.style_keep == 'H':
+                self.ui.window_main_table.cellWidget(5, 3).setCurrentIndex(1)
+            elif par.style_keep == 'P':
+                self.ui.window_main_table.cellWidget(5, 3).setCurrentIndex(2)
+            self.ui.window_main_table.cellWidget(9, 4).setText(par.stroke_keep)
+            self.ui.window_main_table.cellWidget(10, 4).setText(par.cycle_keep)
+            self.ui.window_main_table.cellWidget(11, 4).setText(par.DH_keep)
+
+            for x in range(0, len(par.keep_items)):
+                par.keep_items[x] = ''
+
     def switch_to_plate(self, stamping_press_type):
+        self.window_main_keep()
         self.hide()
         self.nw = plate_first_windows(stamping_press_type)
         self.nw.show()
@@ -353,14 +398,99 @@
                     pass
 
     def customize_typing(self, parameter_type):
+        # 目前只製作行程、行程數、閉合
         if parameter_type == 'stroke':
-            item = self.ui.window_main_table.cellWidget(9, 3).text()
-            punch_stroke = QTableWidgetItem(item)
-            punch_stroke.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
-            punch_stroke.setFlags(punch_stroke.flags() & ~Qt.ItemIsEditable)
-            self.ui.window_main_table.setItem(9, 3, punch_stroke)
+            current_text = self.ui.window_main_table.cellWidget(9, 4).text()
+            if current_text != '':
+                item = self.ui.window_main_table.item(9, 3).text()
+                punch_stroke = QTableWidgetItem(item)
+                punch_stroke.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
+                font = QtGui.QFont()
+                font.setStrikeOut(True)
+                font.setKerning(True)
+                punch_stroke.setFont(font)
+                self.ui.window_main_table.setItem(9, 3, punch_stroke)
+            elif current_text == '':
+                item = self.ui.window_main_table.item(9, 3).text()
+                punch_stroke = QTableWidgetItem(item)
+                punch_stroke.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
+                font = QtGui.QFont()
+                font.setStrikeOut(False)
+                font.setKerning(True)
+                punch_stroke.setFont(font)
+                self.ui.window_main_table.setItem(9, 3, punch_stroke)
+        elif parameter_type == 'cycle':
+            current_text = self.ui.window_main_table.cellWidget(10, 4).text()
+            if current_text != '':
+                item = self.ui.window_main_table.item(10, 3).text()
+                punch_stroke = QTableWidgetItem(item)
+                punch_stroke.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
+                font = QtGui.QFont()
+                font.setStrikeOut(True)
+                font.setKerning(True)
+                punch_stroke.setFont(font)
+                self.ui.window_main_table.setItem(10, 3, punch_stroke)
+            elif current_text == '':
+                item = self.ui.window_main_table.item(10, 3).text()
+                punch_stroke = QTableWidgetItem(item)
+                punch_stroke.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
+                font = QtGui.QFont()
+                font.setStrikeOut(False)
+                font.setKerning(True)
+                punch_stroke.setFont(font)
+                self.ui.window_main_table.setItem(10, 3, punch_stroke)
+        elif parameter_type == 'DH':
+            current_text = self.ui.window_main_table.cellWidget(11, 4).text()
+            if current_text != '':
+                item = self.ui.window_main_table.item(11, 3).text()
+                punch_stroke = QTableWidgetItem(item)
+                punch_stroke.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
+                font = QtGui.QFont()
+                font.setStrikeOut(True)
+                font.setKerning(True)
+                punch_stroke.setFont(font)
+                self.ui.window_main_table.setItem(11, 3, punch_stroke)
+            elif current_text == '':
+                item = self.ui.window_main_table.item(11, 3).text()
+                punch_stroke = QTableWidgetItem(item)
+                punch_stroke.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
+                font = QtGui.QFont()
+                font.setStrikeOut(False)
+                font.setKerning(True)
+                punch_stroke.setFont(font)
+                self.ui.window_main_table.setItem(11, 3, punch_stroke)
+
+    def customize_dimension_check(self):
+        # 目前只製作行程、行程數、閉合
+        check_item = []
+        for x in range(9, 17):
+            check_item.append(self.ui.window_main_table.cellWidget(x, 4).text())
+        if check_item[0] != '':
+            par.customize_stroke = self.ui.window_main_table.cellWidget(9, 4).text()
+        elif check_item[0] == '':
+            par.customize_stroke = self.ui.window_main_table.item(9, 3).text()
+        if check_item[1] != '':
+            par.customize_cycle = self.ui.window_main_table.cellWidget(10, 4).text()
+        elif check_item[1] == '':
+            par.customize_cycle = self.ui.window_main_table.item(10, 3).text()
+        if check_item[2] != '':
+            par.customize_DH = self.ui.window_main_table.cellWidget(11, 4).text()
+        elif check_item[2] == '':
+            par.customize_DH = self.ui.window_main_table.item(11, 3).text()
+        print(check_item, par.customize_stroke, par.customize_cycle, par.customize_DH)
+
+    def window_main_keep(self):
+        par.main_change = '1'
+        par.unit_keep = self.ui.window_main_table.cellWidget(2, 3).currentText()
+        par.type_keep = self.ui.window_main_table.cellWidget(4, 3).currentText()
+        par.style_keep = self.ui.window_main_table.cellWidget(5, 3).currentText()
+        par.stroke_keep = self.ui.window_main_table.cellWidget(9, 4).text()
+        par.cycle_keep = self.ui.window_main_table.cellWidget(10, 4).text()
+        par.DH_keep = self.ui.window_main_table.cellWidget(11, 4).text()
+        print(par.unit_keep, par.type_keep, par.style_keep, par.stroke_keep, par.cycle_keep, par.DH_keep)
 
     def start(self):
+        self.customize_dimension_check()
         type = self.ui.window_main_table.cellWidget(4, 3).currentText()
         travel_type = str(self.ui.window_main_table.cellWidget(5, 3).currentText())
         specifications_travel_value = str(self.ui.window_main_table.item(9, 3).text())
@@ -430,6 +560,8 @@
         par.stamping_press_type = stamping_press_type
         par.stamping_press_style = style
 
+        return stamping_press_type
+
 
     def choos(self,prossing, travel_type):
         # 確認型號"輸入型號"
@@ -778,7 +910,13 @@
         self.setWindowTitle('平板')
         self.ui.pad_select.currentIndexChanged.connect(lambda: self.select_plate_type_name(stamping_press_type))
         self.ui.plate_start.clicked.connect(lambda: self.start(stamping_press_type))
+        self.ui.plate_escape.clicked.connect(lambda: self.switch_to_main())
 
+
+    def switch_to_main(self):
+        self.hide()
+        self.nw = main()
+        self.nw.show()
 
     # 選擇平板類型
     def select_plate_type_name(self, stamping_press_type):
Index: SYEI_stamping_press_system/window_main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\r\n\r\n# Form implementation generated from reading ui file 'window_main.ui'\r\n#\r\n# Created by: PyQt5 UI code generator 5.15.4\r\n#\r\n# WARNING: Any manual changes made to this file will be lost when pyuic5 is\r\n# run again.  Do not edit this file unless you know what you are doing.\r\n\r\n\r\nfrom PyQt5 import QtCore, QtGui, QtWidgets\r\n\r\n\r\nclass Ui_Form(object):\r\n    def setupUi(self, Form):\r\n        Form.setObjectName(\"Form\")\r\n        Form.resize(792, 918)\r\n        self.window_main_table = QtWidgets.QTableWidget(Form)\r\n        self.window_main_table.setEnabled(True)\r\n        self.window_main_table.setGeometry(QtCore.QRect(10, 10, 641, 771))\r\n        font = QtGui.QFont()\r\n        font.setFamily(\"微軟正黑體\")\r\n        font.setPointSize(12)\r\n        self.window_main_table.setFont(font)\r\n        self.window_main_table.setEditTriggers(QtWidgets.QAbstractItemView.AnyKeyPressed|QtWidgets.QAbstractItemView.CurrentChanged|QtWidgets.QAbstractItemView.EditKeyPressed)\r\n        self.window_main_table.setTabKeyNavigation(True)\r\n        self.window_main_table.setRowCount(24)\r\n        self.window_main_table.setColumnCount(14)\r\n        self.window_main_table.setObjectName(\"window_main_table\")\r\n        self.window_main_table.horizontalHeader().setVisible(False)\r\n        self.window_main_table.verticalHeader().setVisible(False)\r\n        self.window_main_table.verticalHeader().setHighlightSections(True)\r\n        self.layoutWidget = QtWidgets.QWidget(Form)\r\n        self.layoutWidget.setGeometry(QtCore.QRect(10, 790, 591, 121))\r\n        self.layoutWidget.setObjectName(\"layoutWidget\")\r\n        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget)\r\n        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)\r\n        self.horizontalLayout.setObjectName(\"horizontalLayout\")\r\n        self.press_preview = QtWidgets.QPushButton(self.layoutWidget)\r\n        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)\r\n        sizePolicy.setHorizontalStretch(0)\r\n        sizePolicy.setVerticalStretch(51)\r\n        sizePolicy.setHeightForWidth(self.press_preview.sizePolicy().hasHeightForWidth())\r\n        self.press_preview.setSizePolicy(sizePolicy)\r\n        font = QtGui.QFont()\r\n        font.setFamily(\"微軟正黑體\")\r\n        font.setPointSize(12)\r\n        self.press_preview.setFont(font)\r\n        self.press_preview.setObjectName(\"press_preview\")\r\n        self.horizontalLayout.addWidget(self.press_preview)\r\n        self.plate_preview = QtWidgets.QPushButton(self.layoutWidget)\r\n        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)\r\n        sizePolicy.setHorizontalStretch(0)\r\n        sizePolicy.setVerticalStretch(0)\r\n        sizePolicy.setHeightForWidth(self.plate_preview.sizePolicy().hasHeightForWidth())\r\n        self.plate_preview.setSizePolicy(sizePolicy)\r\n        font = QtGui.QFont()\r\n        font.setFamily(\"微軟正黑體\")\r\n        font.setPointSize(12)\r\n        self.plate_preview.setFont(font)\r\n        self.plate_preview.setObjectName(\"plate_preview\")\r\n        self.horizontalLayout.addWidget(self.plate_preview)\r\n        self.input = QtWidgets.QPushButton(self.layoutWidget)\r\n        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)\r\n        sizePolicy.setHorizontalStretch(0)\r\n        sizePolicy.setVerticalStretch(0)\r\n        sizePolicy.setHeightForWidth(self.input.sizePolicy().hasHeightForWidth())\r\n        self.input.setSizePolicy(sizePolicy)\r\n        font = QtGui.QFont()\r\n        font.setFamily(\"微軟正黑體\")\r\n        font.setPointSize(12)\r\n        self.input.setFont(font)\r\n        self.input.setObjectName(\"input\")\r\n        self.horizontalLayout.addWidget(self.input)\r\n        self.start = QtWidgets.QPushButton(self.layoutWidget)\r\n        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)\r\n        sizePolicy.setHorizontalStretch(0)\r\n        sizePolicy.setVerticalStretch(0)\r\n        sizePolicy.setHeightForWidth(self.start.sizePolicy().hasHeightForWidth())\r\n        self.start.setSizePolicy(sizePolicy)\r\n        font = QtGui.QFont()\r\n        font.setFamily(\"微軟正黑體\")\r\n        font.setPointSize(12)\r\n        self.start.setFont(font)\r\n        self.start.setObjectName(\"start\")\r\n        self.horizontalLayout.addWidget(self.start)\r\n\r\n        self.retranslateUi(Form)\r\n        QtCore.QMetaObject.connectSlotsByName(Form)\r\n\r\n    def retranslateUi(self, Form):\r\n        _translate = QtCore.QCoreApplication.translate\r\n        Form.setWindowTitle(_translate(\"Form\", \"Form\"))\r\n        self.press_preview.setText(_translate(\"Form\", \"衝頭預覽\"))\r\n        self.plate_preview.setText(_translate(\"Form\", \"平板預覽\"))\r\n        self.input.setText(_translate(\"Form\", \"匯入參數\"))\r\n        self.start.setText(_translate(\"Form\", \"完成設定\\n\"\r\n\"產生圖面\"))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    import sys\r\n    app = QtWidgets.QApplication(sys.argv)\r\n    Form = QtWidgets.QWidget()\r\n    ui = Ui_Form()\r\n    ui.setupUi(Form)\r\n    Form.show()\r\n    sys.exit(app.exec_())\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SYEI_stamping_press_system/window_main.py b/SYEI_stamping_press_system/window_main.py
--- a/SYEI_stamping_press_system/window_main.py	(revision ad4b10c49ffb455c1b8936742317bee1e8e94acb)
+++ b/SYEI_stamping_press_system/window_main.py	(date 1698929210072)
@@ -2,7 +2,7 @@
 
 # Form implementation generated from reading ui file 'window_main.ui'
 #
-# Created by: PyQt5 UI code generator 5.15.4
+# Created by: PyQt5 UI code generator 5.15.7
 #
 # WARNING: Any manual changes made to this file will be lost when pyuic5 is
 # run again.  Do not edit this file unless you know what you are doing.
@@ -27,6 +27,12 @@
         self.window_main_table.setRowCount(24)
         self.window_main_table.setColumnCount(14)
         self.window_main_table.setObjectName("window_main_table")
+        item = QtWidgets.QTableWidgetItem()
+        font = QtGui.QFont()
+        font.setStrikeOut(True)
+        font.setKerning(True)
+        item.setFont(font)
+        self.window_main_table.setItem(0, 0, item)
         self.window_main_table.horizontalHeader().setVisible(False)
         self.window_main_table.verticalHeader().setVisible(False)
         self.window_main_table.verticalHeader().setHighlightSections(True)
@@ -91,6 +97,11 @@
     def retranslateUi(self, Form):
         _translate = QtCore.QCoreApplication.translate
         Form.setWindowTitle(_translate("Form", "Form"))
+        __sortingEnabled = self.window_main_table.isSortingEnabled()
+        self.window_main_table.setSortingEnabled(False)
+        item = self.window_main_table.item(0, 0)
+        item.setText(_translate("Form", "123"))
+        self.window_main_table.setSortingEnabled(__sortingEnabled)
         self.press_preview.setText(_translate("Form", "衝頭預覽"))
         self.plate_preview.setText(_translate("Form", "平板預覽"))
         self.input.setText(_translate("Form", "匯入參數"))
Index: SYEI_stamping_press_system/window_main.ui
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ui version=\"4.0\">\r\n <class>Form</class>\r\n <widget class=\"QWidget\" name=\"Form\">\r\n  <property name=\"geometry\">\r\n   <rect>\r\n    <x>0</x>\r\n    <y>0</y>\r\n    <width>792</width>\r\n    <height>918</height>\r\n   </rect>\r\n  </property>\r\n  <property name=\"windowTitle\">\r\n   <string>Form</string>\r\n  </property>\r\n  <widget class=\"QTableWidget\" name=\"window_main_table\">\r\n   <property name=\"enabled\">\r\n    <bool>true</bool>\r\n   </property>\r\n   <property name=\"geometry\">\r\n    <rect>\r\n     <x>10</x>\r\n     <y>10</y>\r\n     <width>641</width>\r\n     <height>771</height>\r\n    </rect>\r\n   </property>\r\n   <property name=\"font\">\r\n    <font>\r\n     <family>微軟正黑體</family>\r\n     <pointsize>12</pointsize>\r\n    </font>\r\n   </property>\r\n   <property name=\"editTriggers\">\r\n    <set>QAbstractItemView::AnyKeyPressed|QAbstractItemView::CurrentChanged|QAbstractItemView::EditKeyPressed</set>\r\n   </property>\r\n   <property name=\"tabKeyNavigation\">\r\n    <bool>true</bool>\r\n   </property>\r\n   <property name=\"rowCount\">\r\n    <number>24</number>\r\n   </property>\r\n   <property name=\"columnCount\">\r\n    <number>14</number>\r\n   </property>\r\n   <attribute name=\"horizontalHeaderVisible\">\r\n    <bool>false</bool>\r\n   </attribute>\r\n   <attribute name=\"verticalHeaderVisible\">\r\n    <bool>false</bool>\r\n   </attribute>\r\n   <attribute name=\"verticalHeaderHighlightSections\">\r\n    <bool>true</bool>\r\n   </attribute>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <row/>\r\n   <column/>\r\n   <column/>\r\n   <column/>\r\n   <column/>\r\n   <column/>\r\n   <column/>\r\n   <column/>\r\n   <column/>\r\n   <column/>\r\n   <column/>\r\n   <column/>\r\n   <column/>\r\n   <column/>\r\n   <column/>\r\n  </widget>\r\n  <widget class=\"QWidget\" name=\"layoutWidget\">\r\n   <property name=\"geometry\">\r\n    <rect>\r\n     <x>10</x>\r\n     <y>790</y>\r\n     <width>591</width>\r\n     <height>121</height>\r\n    </rect>\r\n   </property>\r\n   <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\r\n    <item>\r\n     <widget class=\"QPushButton\" name=\"press_preview\">\r\n      <property name=\"sizePolicy\">\r\n       <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Preferred\">\r\n        <horstretch>0</horstretch>\r\n        <verstretch>51</verstretch>\r\n       </sizepolicy>\r\n      </property>\r\n      <property name=\"font\">\r\n       <font>\r\n        <family>微軟正黑體</family>\r\n        <pointsize>12</pointsize>\r\n       </font>\r\n      </property>\r\n      <property name=\"text\">\r\n       <string>衝頭預覽</string>\r\n      </property>\r\n     </widget>\r\n    </item>\r\n    <item>\r\n     <widget class=\"QPushButton\" name=\"plate_preview\">\r\n      <property name=\"sizePolicy\">\r\n       <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Preferred\">\r\n        <horstretch>0</horstretch>\r\n        <verstretch>0</verstretch>\r\n       </sizepolicy>\r\n      </property>\r\n      <property name=\"font\">\r\n       <font>\r\n        <family>微軟正黑體</family>\r\n        <pointsize>12</pointsize>\r\n       </font>\r\n      </property>\r\n      <property name=\"text\">\r\n       <string>平板預覽</string>\r\n      </property>\r\n     </widget>\r\n    </item>\r\n    <item>\r\n     <widget class=\"QPushButton\" name=\"input\">\r\n      <property name=\"sizePolicy\">\r\n       <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Preferred\">\r\n        <horstretch>0</horstretch>\r\n        <verstretch>0</verstretch>\r\n       </sizepolicy>\r\n      </property>\r\n      <property name=\"font\">\r\n       <font>\r\n        <family>微軟正黑體</family>\r\n        <pointsize>12</pointsize>\r\n       </font>\r\n      </property>\r\n      <property name=\"text\">\r\n       <string>匯入參數</string>\r\n      </property>\r\n     </widget>\r\n    </item>\r\n    <item>\r\n     <widget class=\"QPushButton\" name=\"start\">\r\n      <property name=\"sizePolicy\">\r\n       <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Preferred\">\r\n        <horstretch>0</horstretch>\r\n        <verstretch>0</verstretch>\r\n       </sizepolicy>\r\n      </property>\r\n      <property name=\"font\">\r\n       <font>\r\n        <family>微軟正黑體</family>\r\n        <pointsize>12</pointsize>\r\n       </font>\r\n      </property>\r\n      <property name=\"text\">\r\n       <string>完成設定\r\n產生圖面</string>\r\n      </property>\r\n     </widget>\r\n    </item>\r\n   </layout>\r\n  </widget>\r\n </widget>\r\n <resources/>\r\n <connections/>\r\n</ui>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SYEI_stamping_press_system/window_main.ui b/SYEI_stamping_press_system/window_main.ui
--- a/SYEI_stamping_press_system/window_main.ui	(revision ad4b10c49ffb455c1b8936742317bee1e8e94acb)
+++ b/SYEI_stamping_press_system/window_main.ui	(date 1698929188343)
@@ -90,6 +90,17 @@
    <column/>
    <column/>
    <column/>
+   <item row="0" column="0">
+    <property name="text">
+     <string>123</string>
+    </property>
+    <property name="font">
+     <font>
+      <strikeout>true</strikeout>
+      <kerning>true</kerning>
+     </font>
+    </property>
+   </item>
   </widget>
   <widget class="QWidget" name="layoutWidget">
    <property name="geometry">
